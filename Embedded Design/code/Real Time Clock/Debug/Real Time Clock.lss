
Real Time Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001778  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  00001778  0000180c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800184  00800184  00001930  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001930  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00002088  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d7c  00000000  00000000  00002228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e1  00000000  00000000  00003fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fd5  00000000  00000000  00004785  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000042c  00000000  00000000  0000575c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f0  00000000  00000000  00005b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001156  00000000  00000000  00006178  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000072ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 38       	cpi	r26, 0x8B	; 139
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d6 05 	call	0xbac	; 0xbac <main>
      8a:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDir>:
#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
      92:	82 34       	cpi	r24, 0x42	; 66
      94:	51 f1       	breq	.+84     	; 0xea <DIO_vsetPINDir+0x58>
      96:	83 34       	cpi	r24, 0x43	; 67
      98:	20 f4       	brcc	.+8      	; 0xa2 <DIO_vsetPINDir+0x10>
      9a:	81 34       	cpi	r24, 0x41	; 65
      9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_vsetPINDir+0xe>
      9e:	7b c0       	rjmp	.+246    	; 0x196 <DIO_vsetPINDir+0x104>
      a0:	07 c0       	rjmp	.+14     	; 0xb0 <DIO_vsetPINDir+0x1e>
      a2:	83 34       	cpi	r24, 0x43	; 67
      a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_vsetPINDir+0x16>
      a6:	3e c0       	rjmp	.+124    	; 0x124 <DIO_vsetPINDir+0x92>
      a8:	84 34       	cpi	r24, 0x44	; 68
      aa:	09 f0       	breq	.+2      	; 0xae <DIO_vsetPINDir+0x1c>
      ac:	74 c0       	rjmp	.+232    	; 0x196 <DIO_vsetPINDir+0x104>
      ae:	57 c0       	rjmp	.+174    	; 0x15e <DIO_vsetPINDir+0xcc>
	{
		
		
		case 'A':
		if(direction==1)
      b0:	41 30       	cpi	r20, 0x01	; 1
      b2:	69 f4       	brne	.+26     	; 0xce <DIO_vsetPINDir+0x3c>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
      b4:	2a b3       	in	r18, 0x1a	; 26
      b6:	81 e0       	ldi	r24, 0x01	; 1
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	ac 01       	movw	r20, r24
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_vsetPINDir+0x30>
      be:	44 0f       	add	r20, r20
      c0:	55 1f       	adc	r21, r21
      c2:	6a 95       	dec	r22
      c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_vsetPINDir+0x2c>
      c6:	ba 01       	movw	r22, r20
      c8:	62 2b       	or	r22, r18
      ca:	6a bb       	out	0x1a, r22	; 26
      cc:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
      ce:	2a b3       	in	r18, 0x1a	; 26
      d0:	81 e0       	ldi	r24, 0x01	; 1
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	ac 01       	movw	r20, r24
      d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_vsetPINDir+0x4a>
      d8:	44 0f       	add	r20, r20
      da:	55 1f       	adc	r21, r21
      dc:	6a 95       	dec	r22
      de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_vsetPINDir+0x46>
      e0:	ba 01       	movw	r22, r20
      e2:	60 95       	com	r22
      e4:	62 23       	and	r22, r18
      e6:	6a bb       	out	0x1a, r22	; 26
      e8:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
      ea:	41 30       	cpi	r20, 0x01	; 1
      ec:	69 f4       	brne	.+26     	; 0x108 <DIO_vsetPINDir+0x76>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
      ee:	27 b3       	in	r18, 0x17	; 23
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	ac 01       	movw	r20, r24
      f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_vsetPINDir+0x6a>
      f8:	44 0f       	add	r20, r20
      fa:	55 1f       	adc	r21, r21
      fc:	6a 95       	dec	r22
      fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_vsetPINDir+0x66>
     100:	ba 01       	movw	r22, r20
     102:	62 2b       	or	r22, r18
     104:	67 bb       	out	0x17, r22	; 23
     106:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
     108:	27 b3       	in	r18, 0x17	; 23
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	ac 01       	movw	r20, r24
     110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_vsetPINDir+0x84>
     112:	44 0f       	add	r20, r20
     114:	55 1f       	adc	r21, r21
     116:	6a 95       	dec	r22
     118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_vsetPINDir+0x80>
     11a:	ba 01       	movw	r22, r20
     11c:	60 95       	com	r22
     11e:	62 23       	and	r22, r18
     120:	67 bb       	out	0x17, r22	; 23
     122:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
     124:	41 30       	cpi	r20, 0x01	; 1
     126:	69 f4       	brne	.+26     	; 0x142 <DIO_vsetPINDir+0xb0>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
     128:	24 b3       	in	r18, 0x14	; 20
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	ac 01       	movw	r20, r24
     130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_vsetPINDir+0xa4>
     132:	44 0f       	add	r20, r20
     134:	55 1f       	adc	r21, r21
     136:	6a 95       	dec	r22
     138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_vsetPINDir+0xa0>
     13a:	ba 01       	movw	r22, r20
     13c:	62 2b       	or	r22, r18
     13e:	64 bb       	out	0x14, r22	; 20
     140:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
     142:	24 b3       	in	r18, 0x14	; 20
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	ac 01       	movw	r20, r24
     14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vsetPINDir+0xbe>
     14c:	44 0f       	add	r20, r20
     14e:	55 1f       	adc	r21, r21
     150:	6a 95       	dec	r22
     152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vsetPINDir+0xba>
     154:	ba 01       	movw	r22, r20
     156:	60 95       	com	r22
     158:	62 23       	and	r22, r18
     15a:	64 bb       	out	0x14, r22	; 20
     15c:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
     15e:	41 30       	cpi	r20, 0x01	; 1
     160:	69 f4       	brne	.+26     	; 0x17c <DIO_vsetPINDir+0xea>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
     162:	21 b3       	in	r18, 0x11	; 17
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	ac 01       	movw	r20, r24
     16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_vsetPINDir+0xde>
     16c:	44 0f       	add	r20, r20
     16e:	55 1f       	adc	r21, r21
     170:	6a 95       	dec	r22
     172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_vsetPINDir+0xda>
     174:	ba 01       	movw	r22, r20
     176:	62 2b       	or	r22, r18
     178:	61 bb       	out	0x11, r22	; 17
     17a:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
     17c:	21 b3       	in	r18, 0x11	; 17
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	ac 01       	movw	r20, r24
     184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_vsetPINDir+0xf8>
     186:	44 0f       	add	r20, r20
     188:	55 1f       	adc	r21, r21
     18a:	6a 95       	dec	r22
     18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_vsetPINDir+0xf4>
     18e:	ba 01       	movw	r22, r20
     190:	60 95       	com	r22
     192:	62 23       	and	r22, r18
     194:	61 bb       	out	0x11, r22	; 17
     196:	08 95       	ret

00000198 <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
     198:	82 34       	cpi	r24, 0x42	; 66
     19a:	51 f1       	breq	.+84     	; 0x1f0 <DIO_write+0x58>
     19c:	83 34       	cpi	r24, 0x43	; 67
     19e:	20 f4       	brcc	.+8      	; 0x1a8 <DIO_write+0x10>
     1a0:	81 34       	cpi	r24, 0x41	; 65
     1a2:	09 f0       	breq	.+2      	; 0x1a6 <DIO_write+0xe>
     1a4:	7b c0       	rjmp	.+246    	; 0x29c <DIO_write+0x104>
     1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <DIO_write+0x1e>
     1a8:	83 34       	cpi	r24, 0x43	; 67
     1aa:	09 f4       	brne	.+2      	; 0x1ae <DIO_write+0x16>
     1ac:	3e c0       	rjmp	.+124    	; 0x22a <DIO_write+0x92>
     1ae:	84 34       	cpi	r24, 0x44	; 68
     1b0:	09 f0       	breq	.+2      	; 0x1b4 <DIO_write+0x1c>
     1b2:	74 c0       	rjmp	.+232    	; 0x29c <DIO_write+0x104>
     1b4:	57 c0       	rjmp	.+174    	; 0x264 <DIO_write+0xcc>
	{
		case 'A' :
		
		if(outputvalue==1)
     1b6:	41 30       	cpi	r20, 0x01	; 1
     1b8:	69 f4       	brne	.+26     	; 0x1d4 <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
     1ba:	2b b3       	in	r18, 0x1b	; 27
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	ac 01       	movw	r20, r24
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_write+0x30>
     1c4:	44 0f       	add	r20, r20
     1c6:	55 1f       	adc	r21, r21
     1c8:	6a 95       	dec	r22
     1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_write+0x2c>
     1cc:	ba 01       	movw	r22, r20
     1ce:	62 2b       	or	r22, r18
     1d0:	6b bb       	out	0x1b, r22	; 27
     1d2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
     1d4:	2b b3       	in	r18, 0x1b	; 27
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	ac 01       	movw	r20, r24
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_write+0x4a>
     1de:	44 0f       	add	r20, r20
     1e0:	55 1f       	adc	r21, r21
     1e2:	6a 95       	dec	r22
     1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_write+0x46>
     1e6:	ba 01       	movw	r22, r20
     1e8:	60 95       	com	r22
     1ea:	62 23       	and	r22, r18
     1ec:	6b bb       	out	0x1b, r22	; 27
     1ee:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
     1f0:	41 30       	cpi	r20, 0x01	; 1
     1f2:	69 f4       	brne	.+26     	; 0x20e <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
     1f4:	28 b3       	in	r18, 0x18	; 24
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	ac 01       	movw	r20, r24
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_write+0x6a>
     1fe:	44 0f       	add	r20, r20
     200:	55 1f       	adc	r21, r21
     202:	6a 95       	dec	r22
     204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_write+0x66>
     206:	ba 01       	movw	r22, r20
     208:	62 2b       	or	r22, r18
     20a:	68 bb       	out	0x18, r22	; 24
     20c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
     20e:	28 b3       	in	r18, 0x18	; 24
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	ac 01       	movw	r20, r24
     216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_write+0x84>
     218:	44 0f       	add	r20, r20
     21a:	55 1f       	adc	r21, r21
     21c:	6a 95       	dec	r22
     21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_write+0x80>
     220:	ba 01       	movw	r22, r20
     222:	60 95       	com	r22
     224:	62 23       	and	r22, r18
     226:	68 bb       	out	0x18, r22	; 24
     228:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
     22a:	41 30       	cpi	r20, 0x01	; 1
     22c:	69 f4       	brne	.+26     	; 0x248 <DIO_write+0xb0>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
     22e:	25 b3       	in	r18, 0x15	; 21
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	ac 01       	movw	r20, r24
     236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_write+0xa4>
     238:	44 0f       	add	r20, r20
     23a:	55 1f       	adc	r21, r21
     23c:	6a 95       	dec	r22
     23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_write+0xa0>
     240:	ba 01       	movw	r22, r20
     242:	62 2b       	or	r22, r18
     244:	65 bb       	out	0x15, r22	; 21
     246:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
     248:	25 b3       	in	r18, 0x15	; 21
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	ac 01       	movw	r20, r24
     250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_write+0xbe>
     252:	44 0f       	add	r20, r20
     254:	55 1f       	adc	r21, r21
     256:	6a 95       	dec	r22
     258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_write+0xba>
     25a:	ba 01       	movw	r22, r20
     25c:	60 95       	com	r22
     25e:	62 23       	and	r22, r18
     260:	65 bb       	out	0x15, r22	; 21
     262:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
     264:	41 30       	cpi	r20, 0x01	; 1
     266:	69 f4       	brne	.+26     	; 0x282 <DIO_write+0xea>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
     268:	22 b3       	in	r18, 0x12	; 18
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	ac 01       	movw	r20, r24
     270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_write+0xde>
     272:	44 0f       	add	r20, r20
     274:	55 1f       	adc	r21, r21
     276:	6a 95       	dec	r22
     278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_write+0xda>
     27a:	ba 01       	movw	r22, r20
     27c:	62 2b       	or	r22, r18
     27e:	62 bb       	out	0x12, r22	; 18
     280:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
     282:	22 b3       	in	r18, 0x12	; 18
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	ac 01       	movw	r20, r24
     28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_write+0xf8>
     28c:	44 0f       	add	r20, r20
     28e:	55 1f       	adc	r21, r21
     290:	6a 95       	dec	r22
     292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_write+0xf4>
     294:	ba 01       	movw	r22, r20
     296:	60 95       	com	r22
     298:	62 23       	and	r22, r18
     29a:	62 bb       	out	0x12, r22	; 18
     29c:	08 95       	ret

0000029e <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
     29e:	82 34       	cpi	r24, 0x42	; 66
     2a0:	f1 f0       	breq	.+60     	; 0x2de <DIO_u8read+0x40>
     2a2:	83 34       	cpi	r24, 0x43	; 67
     2a4:	20 f4       	brcc	.+8      	; 0x2ae <DIO_u8read+0x10>
     2a6:	81 34       	cpi	r24, 0x41	; 65
     2a8:	09 f0       	breq	.+2      	; 0x2ac <DIO_u8read+0xe>
     2aa:	4f c0       	rjmp	.+158    	; 0x34a <DIO_u8read+0xac>
     2ac:	06 c0       	rjmp	.+12     	; 0x2ba <DIO_u8read+0x1c>
     2ae:	83 34       	cpi	r24, 0x43	; 67
     2b0:	41 f1       	breq	.+80     	; 0x302 <DIO_u8read+0x64>
     2b2:	84 34       	cpi	r24, 0x44	; 68
     2b4:	09 f0       	breq	.+2      	; 0x2b8 <DIO_u8read+0x1a>
     2b6:	49 c0       	rjmp	.+146    	; 0x34a <DIO_u8read+0xac>
     2b8:	36 c0       	rjmp	.+108    	; 0x326 <DIO_u8read+0x88>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
     2ba:	29 b3       	in	r18, 0x19	; 25
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	06 2e       	mov	r0, r22
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_u8read+0x2a>
     2c4:	88 0f       	add	r24, r24
     2c6:	99 1f       	adc	r25, r25
     2c8:	0a 94       	dec	r0
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_u8read+0x26>
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	82 23       	and	r24, r18
     2d0:	93 23       	and	r25, r19
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_u8read+0x3a>
     2d4:	95 95       	asr	r25
     2d6:	87 95       	ror	r24
     2d8:	6a 95       	dec	r22
     2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_u8read+0x36>
		break;
     2dc:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
     2de:	26 b3       	in	r18, 0x16	; 22
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	06 2e       	mov	r0, r22
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_u8read+0x4e>
     2e8:	88 0f       	add	r24, r24
     2ea:	99 1f       	adc	r25, r25
     2ec:	0a 94       	dec	r0
     2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_u8read+0x4a>
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	82 23       	and	r24, r18
     2f4:	93 23       	and	r25, r19
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_u8read+0x5e>
     2f8:	95 95       	asr	r25
     2fa:	87 95       	ror	r24
     2fc:	6a 95       	dec	r22
     2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_u8read+0x5a>
		break;
     300:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
     302:	23 b3       	in	r18, 0x13	; 19
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	06 2e       	mov	r0, r22
     30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_u8read+0x72>
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	0a 94       	dec	r0
     312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_u8read+0x6e>
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	82 23       	and	r24, r18
     318:	93 23       	and	r25, r19
     31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_u8read+0x82>
     31c:	95 95       	asr	r25
     31e:	87 95       	ror	r24
     320:	6a 95       	dec	r22
     322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_u8read+0x7e>
		break;
     324:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
     326:	20 b3       	in	r18, 0x10	; 16
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	06 2e       	mov	r0, r22
     32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_u8read+0x96>
     330:	88 0f       	add	r24, r24
     332:	99 1f       	adc	r25, r25
     334:	0a 94       	dec	r0
     336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_u8read+0x92>
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	82 23       	and	r24, r18
     33c:	93 23       	and	r25, r19
     33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_u8read+0xa6>
     340:	95 95       	asr	r25
     342:	87 95       	ror	r24
     344:	6a 95       	dec	r22
     346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_u8read+0xa2>
		break;
     348:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
     34a:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
		break;
	}
	return return_value ;
}
     34c:	08 95       	ret

0000034e <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
     34e:	82 34       	cpi	r24, 0x42	; 66
     350:	b9 f0       	breq	.+46     	; 0x380 <DIO_toggle+0x32>
     352:	83 34       	cpi	r24, 0x43	; 67
     354:	18 f4       	brcc	.+6      	; 0x35c <DIO_toggle+0xe>
     356:	81 34       	cpi	r24, 0x41	; 65
     358:	c9 f5       	brne	.+114    	; 0x3cc <DIO_toggle+0x7e>
     35a:	05 c0       	rjmp	.+10     	; 0x366 <DIO_toggle+0x18>
     35c:	83 34       	cpi	r24, 0x43	; 67
     35e:	e9 f0       	breq	.+58     	; 0x39a <DIO_toggle+0x4c>
     360:	84 34       	cpi	r24, 0x44	; 68
     362:	a1 f5       	brne	.+104    	; 0x3cc <DIO_toggle+0x7e>
     364:	27 c0       	rjmp	.+78     	; 0x3b4 <DIO_toggle+0x66>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
     366:	2b b3       	in	r18, 0x1b	; 27
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	ac 01       	movw	r20, r24
     36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_toggle+0x26>
     370:	44 0f       	add	r20, r20
     372:	55 1f       	adc	r21, r21
     374:	6a 95       	dec	r22
     376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_toggle+0x22>
     378:	ba 01       	movw	r22, r20
     37a:	62 27       	eor	r22, r18
     37c:	6b bb       	out	0x1b, r22	; 27
		break;
     37e:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
     380:	28 b3       	in	r18, 0x18	; 24
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	ac 01       	movw	r20, r24
     388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_toggle+0x40>
     38a:	44 0f       	add	r20, r20
     38c:	55 1f       	adc	r21, r21
     38e:	6a 95       	dec	r22
     390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_toggle+0x3c>
     392:	ba 01       	movw	r22, r20
     394:	62 27       	eor	r22, r18
     396:	68 bb       	out	0x18, r22	; 24
		break;
     398:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
     39a:	25 b3       	in	r18, 0x15	; 21
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	ac 01       	movw	r20, r24
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_toggle+0x5a>
     3a4:	44 0f       	add	r20, r20
     3a6:	55 1f       	adc	r21, r21
     3a8:	6a 95       	dec	r22
     3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_toggle+0x56>
     3ac:	ba 01       	movw	r22, r20
     3ae:	62 27       	eor	r22, r18
     3b0:	65 bb       	out	0x15, r22	; 21
		break;
     3b2:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
     3b4:	22 b3       	in	r18, 0x12	; 18
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	ac 01       	movw	r20, r24
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_toggle+0x74>
     3be:	44 0f       	add	r20, r20
     3c0:	55 1f       	adc	r21, r21
     3c2:	6a 95       	dec	r22
     3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_toggle+0x70>
     3c6:	ba 01       	movw	r22, r20
     3c8:	62 27       	eor	r22, r18
     3ca:	62 bb       	out	0x12, r22	; 18
     3cc:	08 95       	ret

000003ce <DIO_set_port_direction>:
		default: break;
	}
}
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
     3ce:	82 34       	cpi	r24, 0x42	; 66
     3d0:	61 f0       	breq	.+24     	; 0x3ea <DIO_set_port_direction+0x1c>
     3d2:	83 34       	cpi	r24, 0x43	; 67
     3d4:	18 f4       	brcc	.+6      	; 0x3dc <DIO_set_port_direction+0xe>
     3d6:	81 34       	cpi	r24, 0x41	; 65
     3d8:	69 f4       	brne	.+26     	; 0x3f4 <DIO_set_port_direction+0x26>
     3da:	05 c0       	rjmp	.+10     	; 0x3e6 <DIO_set_port_direction+0x18>
     3dc:	83 34       	cpi	r24, 0x43	; 67
     3de:	39 f0       	breq	.+14     	; 0x3ee <DIO_set_port_direction+0x20>
     3e0:	84 34       	cpi	r24, 0x44	; 68
     3e2:	41 f4       	brne	.+16     	; 0x3f4 <DIO_set_port_direction+0x26>
     3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <DIO_set_port_direction+0x24>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
     3e6:	6a bb       	out	0x1a, r22	; 26
		break ;
     3e8:	08 95       	ret
		case 'B':
		DDRB=direction; //set the direction of port B
     3ea:	67 bb       	out	0x17, r22	; 23
		break ;
     3ec:	08 95       	ret
		case 'C' :
		DDRC=direction; //set the direction of port C
     3ee:	64 bb       	out	0x14, r22	; 20
		break ;
     3f0:	08 95       	ret
		case 'D':
		DDRD=direction; //set the direction of port D
     3f2:	61 bb       	out	0x11, r22	; 17
     3f4:	08 95       	ret

000003f6 <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
     3f6:	82 34       	cpi	r24, 0x42	; 66
     3f8:	61 f0       	breq	.+24     	; 0x412 <DIO_write_port+0x1c>
     3fa:	83 34       	cpi	r24, 0x43	; 67
     3fc:	18 f4       	brcc	.+6      	; 0x404 <DIO_write_port+0xe>
     3fe:	81 34       	cpi	r24, 0x41	; 65
     400:	69 f4       	brne	.+26     	; 0x41c <DIO_write_port+0x26>
     402:	05 c0       	rjmp	.+10     	; 0x40e <DIO_write_port+0x18>
     404:	83 34       	cpi	r24, 0x43	; 67
     406:	39 f0       	breq	.+14     	; 0x416 <DIO_write_port+0x20>
     408:	84 34       	cpi	r24, 0x44	; 68
     40a:	41 f4       	brne	.+16     	; 0x41c <DIO_write_port+0x26>
     40c:	06 c0       	rjmp	.+12     	; 0x41a <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
     40e:	6b bb       	out	0x1b, r22	; 27
		break ;
     410:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
     412:	68 bb       	out	0x18, r22	; 24
		break ;
     414:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
     416:	65 bb       	out	0x15, r22	; 21
		break ;
     418:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
     41a:	62 bb       	out	0x12, r22	; 18
     41c:	08 95       	ret

0000041e <DIO_read_port>:
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
     41e:	82 34       	cpi	r24, 0x42	; 66
     420:	61 f0       	breq	.+24     	; 0x43a <DIO_read_port+0x1c>
     422:	83 34       	cpi	r24, 0x43	; 67
     424:	18 f4       	brcc	.+6      	; 0x42c <DIO_read_port+0xe>
     426:	81 34       	cpi	r24, 0x41	; 65
     428:	71 f4       	brne	.+28     	; 0x446 <DIO_read_port+0x28>
     42a:	05 c0       	rjmp	.+10     	; 0x436 <DIO_read_port+0x18>
     42c:	83 34       	cpi	r24, 0x43	; 67
     42e:	39 f0       	breq	.+14     	; 0x43e <DIO_read_port+0x20>
     430:	84 34       	cpi	r24, 0x44	; 68
     432:	49 f4       	brne	.+18     	; 0x446 <DIO_read_port+0x28>
     434:	06 c0       	rjmp	.+12     	; 0x442 <DIO_read_port+0x24>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
     436:	89 b3       	in	r24, 0x19	; 25
		break ;
     438:	08 95       	ret
		case 'B':
		return_val=PINB; // read the value of port B 
     43a:	86 b3       	in	r24, 0x16	; 22
		break ;
     43c:	08 95       	ret
		case 'C' :
		return_val=PINC; // read the value of port C 
     43e:	83 b3       	in	r24, 0x13	; 19
		break ;
     440:	08 95       	ret
		case 'D':
		return_val=PIND; // read the value of port D 
     442:	80 b3       	in	r24, 0x10	; 16
		break ;
     444:	08 95       	ret
	}
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
     446:	80 e0       	ldi	r24, 0x00	; 0
		break ;
		default:
		break ;
	}
	return return_val;
}
     448:	08 95       	ret

0000044a <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
     44a:	82 34       	cpi	r24, 0x42	; 66
     44c:	51 f1       	breq	.+84     	; 0x4a2 <DIO_vconnectpullup+0x58>
     44e:	83 34       	cpi	r24, 0x43	; 67
     450:	20 f4       	brcc	.+8      	; 0x45a <DIO_vconnectpullup+0x10>
     452:	81 34       	cpi	r24, 0x41	; 65
     454:	09 f0       	breq	.+2      	; 0x458 <DIO_vconnectpullup+0xe>
     456:	7b c0       	rjmp	.+246    	; 0x54e <DIO_vconnectpullup+0x104>
     458:	07 c0       	rjmp	.+14     	; 0x468 <DIO_vconnectpullup+0x1e>
     45a:	83 34       	cpi	r24, 0x43	; 67
     45c:	09 f4       	brne	.+2      	; 0x460 <DIO_vconnectpullup+0x16>
     45e:	3e c0       	rjmp	.+124    	; 0x4dc <DIO_vconnectpullup+0x92>
     460:	84 34       	cpi	r24, 0x44	; 68
     462:	09 f0       	breq	.+2      	; 0x466 <DIO_vconnectpullup+0x1c>
     464:	74 c0       	rjmp	.+232    	; 0x54e <DIO_vconnectpullup+0x104>
     466:	57 c0       	rjmp	.+174    	; 0x516 <DIO_vconnectpullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
     468:	41 30       	cpi	r20, 0x01	; 1
     46a:	69 f4       	brne	.+26     	; 0x486 <DIO_vconnectpullup+0x3c>
		{
			SET_BIT(PORTA,pinnumber);
     46c:	2b b3       	in	r18, 0x1b	; 27
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	ac 01       	movw	r20, r24
     474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_vconnectpullup+0x30>
     476:	44 0f       	add	r20, r20
     478:	55 1f       	adc	r21, r21
     47a:	6a 95       	dec	r22
     47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_vconnectpullup+0x2c>
     47e:	ba 01       	movw	r22, r20
     480:	62 2b       	or	r22, r18
     482:	6b bb       	out	0x1b, r22	; 27
     484:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
     486:	2b b3       	in	r18, 0x1b	; 27
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	ac 01       	movw	r20, r24
     48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_vconnectpullup+0x4a>
     490:	44 0f       	add	r20, r20
     492:	55 1f       	adc	r21, r21
     494:	6a 95       	dec	r22
     496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_vconnectpullup+0x46>
     498:	ba 01       	movw	r22, r20
     49a:	60 95       	com	r22
     49c:	62 23       	and	r22, r18
     49e:	6b bb       	out	0x1b, r22	; 27
     4a0:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==1)
     4a2:	41 30       	cpi	r20, 0x01	; 1
     4a4:	69 f4       	brne	.+26     	; 0x4c0 <DIO_vconnectpullup+0x76>
		{
			SET_BIT(PORTB,pinnumber);
     4a6:	28 b3       	in	r18, 0x18	; 24
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	ac 01       	movw	r20, r24
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_vconnectpullup+0x6a>
     4b0:	44 0f       	add	r20, r20
     4b2:	55 1f       	adc	r21, r21
     4b4:	6a 95       	dec	r22
     4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_vconnectpullup+0x66>
     4b8:	ba 01       	movw	r22, r20
     4ba:	62 2b       	or	r22, r18
     4bc:	68 bb       	out	0x18, r22	; 24
     4be:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
     4c0:	28 b3       	in	r18, 0x18	; 24
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	ac 01       	movw	r20, r24
     4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_vconnectpullup+0x84>
     4ca:	44 0f       	add	r20, r20
     4cc:	55 1f       	adc	r21, r21
     4ce:	6a 95       	dec	r22
     4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_vconnectpullup+0x80>
     4d2:	ba 01       	movw	r22, r20
     4d4:	60 95       	com	r22
     4d6:	62 23       	and	r22, r18
     4d8:	68 bb       	out	0x18, r22	; 24
     4da:	08 95       	ret
		}
		break;
		case 'C':
		if(connect_pullup==1)
     4dc:	41 30       	cpi	r20, 0x01	; 1
     4de:	69 f4       	brne	.+26     	; 0x4fa <DIO_vconnectpullup+0xb0>
		{
			SET_BIT(PORTC,pinnumber);
     4e0:	25 b3       	in	r18, 0x15	; 21
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	ac 01       	movw	r20, r24
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_vconnectpullup+0xa4>
     4ea:	44 0f       	add	r20, r20
     4ec:	55 1f       	adc	r21, r21
     4ee:	6a 95       	dec	r22
     4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_vconnectpullup+0xa0>
     4f2:	ba 01       	movw	r22, r20
     4f4:	62 2b       	or	r22, r18
     4f6:	65 bb       	out	0x15, r22	; 21
     4f8:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
     4fa:	25 b3       	in	r18, 0x15	; 21
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	ac 01       	movw	r20, r24
     502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_vconnectpullup+0xbe>
     504:	44 0f       	add	r20, r20
     506:	55 1f       	adc	r21, r21
     508:	6a 95       	dec	r22
     50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_vconnectpullup+0xba>
     50c:	ba 01       	movw	r22, r20
     50e:	60 95       	com	r22
     510:	62 23       	and	r22, r18
     512:	65 bb       	out	0x15, r22	; 21
     514:	08 95       	ret
		}
		break;
		case 'D':
		if(connect_pullup==1)
     516:	41 30       	cpi	r20, 0x01	; 1
     518:	69 f4       	brne	.+26     	; 0x534 <DIO_vconnectpullup+0xea>
		{
			SET_BIT(PORTD,pinnumber);
     51a:	22 b3       	in	r18, 0x12	; 18
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	ac 01       	movw	r20, r24
     522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_vconnectpullup+0xde>
     524:	44 0f       	add	r20, r20
     526:	55 1f       	adc	r21, r21
     528:	6a 95       	dec	r22
     52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_vconnectpullup+0xda>
     52c:	ba 01       	movw	r22, r20
     52e:	62 2b       	or	r22, r18
     530:	62 bb       	out	0x12, r22	; 18
     532:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
     534:	22 b3       	in	r18, 0x12	; 18
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	ac 01       	movw	r20, r24
     53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_vconnectpullup+0xf8>
     53e:	44 0f       	add	r20, r20
     540:	55 1f       	adc	r21, r21
     542:	6a 95       	dec	r22
     544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_vconnectpullup+0xf4>
     546:	ba 01       	movw	r22, r20
     548:	60 95       	com	r22
     54a:	62 23       	and	r22, r18
     54c:	62 bb       	out	0x12, r22	; 18
     54e:	08 95       	ret

00000550 <write_low_nibble>:
	}
}

void write_low_nibble(unsigned char portname,unsigned char value)
{
	value&=0x0f;
     550:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
     552:	82 34       	cpi	r24, 0x42	; 66
     554:	81 f0       	breq	.+32     	; 0x576 <write_low_nibble+0x26>
     556:	83 34       	cpi	r24, 0x43	; 67
     558:	18 f4       	brcc	.+6      	; 0x560 <write_low_nibble+0x10>
     55a:	81 34       	cpi	r24, 0x41	; 65
     55c:	f1 f4       	brne	.+60     	; 0x59a <write_low_nibble+0x4a>
     55e:	05 c0       	rjmp	.+10     	; 0x56a <write_low_nibble+0x1a>
     560:	83 34       	cpi	r24, 0x43	; 67
     562:	79 f0       	breq	.+30     	; 0x582 <write_low_nibble+0x32>
     564:	84 34       	cpi	r24, 0x44	; 68
     566:	c9 f4       	brne	.+50     	; 0x59a <write_low_nibble+0x4a>
     568:	12 c0       	rjmp	.+36     	; 0x58e <write_low_nibble+0x3e>
	{
		case 'A':
		PORTA&=0xf0;
     56a:	8b b3       	in	r24, 0x1b	; 27
     56c:	80 7f       	andi	r24, 0xF0	; 240
     56e:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
     570:	8b b3       	in	r24, 0x1b	; 27
     572:	86 2b       	or	r24, r22
     574:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0xf0;
     576:	88 b3       	in	r24, 0x18	; 24
     578:	80 7f       	andi	r24, 0xF0	; 240
     57a:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
     57c:	88 b3       	in	r24, 0x18	; 24
     57e:	86 2b       	or	r24, r22
     580:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0xf0;
     582:	85 b3       	in	r24, 0x15	; 21
     584:	80 7f       	andi	r24, 0xF0	; 240
     586:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
     588:	85 b3       	in	r24, 0x15	; 21
     58a:	86 2b       	or	r24, r22
     58c:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0xf0;
     58e:	82 b3       	in	r24, 0x12	; 18
     590:	80 7f       	andi	r24, 0xF0	; 240
     592:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
     594:	82 b3       	in	r24, 0x12	; 18
     596:	68 2b       	or	r22, r24
     598:	62 bb       	out	0x12, r22	; 18
     59a:	08 95       	ret

0000059c <write_high_nibble>:
	}
}

void write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
     59c:	62 95       	swap	r22
     59e:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
     5a0:	82 34       	cpi	r24, 0x42	; 66
     5a2:	81 f0       	breq	.+32     	; 0x5c4 <write_high_nibble+0x28>
     5a4:	83 34       	cpi	r24, 0x43	; 67
     5a6:	18 f4       	brcc	.+6      	; 0x5ae <write_high_nibble+0x12>
     5a8:	81 34       	cpi	r24, 0x41	; 65
     5aa:	f1 f4       	brne	.+60     	; 0x5e8 <write_high_nibble+0x4c>
     5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <write_high_nibble+0x1c>
     5ae:	83 34       	cpi	r24, 0x43	; 67
     5b0:	79 f0       	breq	.+30     	; 0x5d0 <write_high_nibble+0x34>
     5b2:	84 34       	cpi	r24, 0x44	; 68
     5b4:	c9 f4       	brne	.+50     	; 0x5e8 <write_high_nibble+0x4c>
     5b6:	12 c0       	rjmp	.+36     	; 0x5dc <write_high_nibble+0x40>
	{
		case 'A':
		PORTA&=0x0f;
     5b8:	8b b3       	in	r24, 0x1b	; 27
     5ba:	8f 70       	andi	r24, 0x0F	; 15
     5bc:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
     5be:	8b b3       	in	r24, 0x1b	; 27
     5c0:	86 2b       	or	r24, r22
     5c2:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
     5c4:	88 b3       	in	r24, 0x18	; 24
     5c6:	8f 70       	andi	r24, 0x0F	; 15
     5c8:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
     5ca:	88 b3       	in	r24, 0x18	; 24
     5cc:	86 2b       	or	r24, r22
     5ce:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
     5d0:	85 b3       	in	r24, 0x15	; 21
     5d2:	8f 70       	andi	r24, 0x0F	; 15
     5d4:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
     5d6:	85 b3       	in	r24, 0x15	; 21
     5d8:	86 2b       	or	r24, r22
     5da:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
     5dc:	82 b3       	in	r24, 0x12	; 18
     5de:	8f 70       	andi	r24, 0x0F	; 15
     5e0:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
     5e2:	82 b3       	in	r24, 0x12	; 18
     5e4:	68 2b       	or	r22, r24
     5e6:	62 bb       	out	0x12, r22	; 18
     5e8:	08 95       	ret

000005ea <EEPROM_write>:
#include <avr/io.h>
#include "std_macros.h"
void EEPROM_write(unsigned short address, unsigned char data )
{
	/*set up address register*/
	EEARL=(char)address;
     5ea:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
     5ec:	9f bb       	out	0x1f, r25	; 31
	/*set up data register*/
	EEDR=data ;
     5ee:	6d bb       	out	0x1d, r22	; 29
	/*write logical one to EEMWE*/
	SET_BIT(EECR,EEMWE);
     5f0:	e2 9a       	sbi	0x1c, 2	; 28
	/*start EEPROM write by setting EEWE*/
	SET_BIT(EECR,EEWE);
     5f2:	e1 9a       	sbi	0x1c, 1	; 28
	/* wait for completion of write operation*/
	while(READ_BIT(EECR,EEWE)==1);
     5f4:	e1 99       	sbic	0x1c, 1	; 28
     5f6:	fe cf       	rjmp	.-4      	; 0x5f4 <EEPROM_write+0xa>
	
}
     5f8:	08 95       	ret

000005fa <EEPROM_read>:
unsigned char EEPROM_read( unsigned short address )
{
	/*set up address register*/
	EEARL=(char)address;
     5fa:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
     5fc:	9f bb       	out	0x1f, r25	; 31
	/*start EEPROM read by setting EERE*/
	SET_BIT(EECR,EERE);
     5fe:	e0 9a       	sbi	0x1c, 0	; 28
	/*return data from data register*/
	return EEDR ;
     600:	8d b3       	in	r24, 0x1d	; 29
}
     602:	08 95       	ret

00000604 <keypad_vInit>:
     604:	84 e4       	ldi	r24, 0x44	; 68
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	41 e0       	ldi	r20, 0x01	; 1
     60a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
     60e:	84 e4       	ldi	r24, 0x44	; 68
     610:	61 e0       	ldi	r22, 0x01	; 1
     612:	41 e0       	ldi	r20, 0x01	; 1
     614:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
     618:	84 e4       	ldi	r24, 0x44	; 68
     61a:	62 e0       	ldi	r22, 0x02	; 2
     61c:	41 e0       	ldi	r20, 0x01	; 1
     61e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
     622:	84 e4       	ldi	r24, 0x44	; 68
     624:	63 e0       	ldi	r22, 0x03	; 3
     626:	41 e0       	ldi	r20, 0x01	; 1
     628:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
     62c:	84 e4       	ldi	r24, 0x44	; 68
     62e:	64 e0       	ldi	r22, 0x04	; 4
     630:	40 e0       	ldi	r20, 0x00	; 0
     632:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
     636:	84 e4       	ldi	r24, 0x44	; 68
     638:	65 e0       	ldi	r22, 0x05	; 5
     63a:	40 e0       	ldi	r20, 0x00	; 0
     63c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
     640:	84 e4       	ldi	r24, 0x44	; 68
     642:	66 e0       	ldi	r22, 0x06	; 6
     644:	40 e0       	ldi	r20, 0x00	; 0
     646:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
     64a:	84 e4       	ldi	r24, 0x44	; 68
     64c:	67 e0       	ldi	r22, 0x07	; 7
     64e:	40 e0       	ldi	r20, 0x00	; 0
     650:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
     654:	84 e4       	ldi	r24, 0x44	; 68
     656:	64 e0       	ldi	r22, 0x04	; 4
     658:	41 e0       	ldi	r20, 0x01	; 1
     65a:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>
     65e:	84 e4       	ldi	r24, 0x44	; 68
     660:	65 e0       	ldi	r22, 0x05	; 5
     662:	41 e0       	ldi	r20, 0x01	; 1
     664:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>
     668:	84 e4       	ldi	r24, 0x44	; 68
     66a:	66 e0       	ldi	r22, 0x06	; 6
     66c:	41 e0       	ldi	r20, 0x01	; 1
     66e:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>
     672:	84 e4       	ldi	r24, 0x44	; 68
     674:	67 e0       	ldi	r22, 0x07	; 7
     676:	41 e0       	ldi	r20, 0x01	; 1
     678:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>
     67c:	08 95       	ret

0000067e <keypad_u8check_press>:
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	60 97       	sbiw	r28, 0x10	; 16
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	f8 94       	cli
     690:	de bf       	out	0x3e, r29	; 62
     692:	0f be       	out	0x3f, r0	; 63
     694:	cd bf       	out	0x3d, r28	; 61
     696:	de 01       	movw	r26, r28
     698:	11 96       	adiw	r26, 0x01	; 1
     69a:	e0 e6       	ldi	r30, 0x60	; 96
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	80 e1       	ldi	r24, 0x10	; 16
     6a0:	01 90       	ld	r0, Z+
     6a2:	0d 92       	st	X+, r0
     6a4:	81 50       	subi	r24, 0x01	; 1
     6a6:	e1 f7       	brne	.-8      	; 0x6a0 <keypad_u8check_press+0x22>
     6a8:	00 e0       	ldi	r16, 0x00	; 0
     6aa:	84 e4       	ldi	r24, 0x44	; 68
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	41 e0       	ldi	r20, 0x01	; 1
     6b0:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
     6b4:	84 e4       	ldi	r24, 0x44	; 68
     6b6:	61 e0       	ldi	r22, 0x01	; 1
     6b8:	41 e0       	ldi	r20, 0x01	; 1
     6ba:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
     6be:	84 e4       	ldi	r24, 0x44	; 68
     6c0:	62 e0       	ldi	r22, 0x02	; 2
     6c2:	41 e0       	ldi	r20, 0x01	; 1
     6c4:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
     6c8:	84 e4       	ldi	r24, 0x44	; 68
     6ca:	63 e0       	ldi	r22, 0x03	; 3
     6cc:	41 e0       	ldi	r20, 0x01	; 1
     6ce:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
     6d2:	84 e4       	ldi	r24, 0x44	; 68
     6d4:	60 2f       	mov	r22, r16
     6d6:	40 e0       	ldi	r20, 0x00	; 0
     6d8:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
     6dc:	10 e0       	ldi	r17, 0x00	; 0
     6de:	61 2f       	mov	r22, r17
     6e0:	6c 5f       	subi	r22, 0xFC	; 252
     6e2:	84 e4       	ldi	r24, 0x44	; 68
     6e4:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_u8read>
     6e8:	88 23       	and	r24, r24
     6ea:	61 f4       	brne	.+24     	; 0x704 <keypad_u8check_press+0x86>
     6ec:	e0 2f       	mov	r30, r16
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	ee 0f       	add	r30, r30
     6f2:	ff 1f       	adc	r31, r31
     6f4:	ee 0f       	add	r30, r30
     6f6:	ff 1f       	adc	r31, r31
     6f8:	e1 0f       	add	r30, r17
     6fa:	f1 1d       	adc	r31, r1
     6fc:	ec 0f       	add	r30, r28
     6fe:	fd 1f       	adc	r31, r29
     700:	81 81       	ldd	r24, Z+1	; 0x01
     702:	04 c0       	rjmp	.+8      	; 0x70c <keypad_u8check_press+0x8e>
     704:	1f 5f       	subi	r17, 0xFF	; 255
     706:	14 30       	cpi	r17, 0x04	; 4
     708:	51 f7       	brne	.-44     	; 0x6de <keypad_u8check_press+0x60>
     70a:	0b c0       	rjmp	.+22     	; 0x722 <keypad_u8check_press+0xa4>
     70c:	60 96       	adiw	r28, 0x10	; 16
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	f8 94       	cli
     712:	de bf       	out	0x3e, r29	; 62
     714:	0f be       	out	0x3f, r0	; 63
     716:	cd bf       	out	0x3d, r28	; 61
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	08 95       	ret
     722:	0f 5f       	subi	r16, 0xFF	; 255
     724:	04 30       	cpi	r16, 0x04	; 4
     726:	09 f6       	brne	.-126    	; 0x6aa <keypad_u8check_press+0x2c>
     728:	8f ef       	ldi	r24, 0xFF	; 255
     72a:	f0 cf       	rjmp	.-32     	; 0x70c <keypad_u8check_press+0x8e>

0000072c <send_falling_edge2>:
}


static void send_falling_edge2(void)
{
	DIO_write('D',3,1);
     72c:	84 e4       	ldi	r24, 0x44	; 68
     72e:	63 e0       	ldi	r22, 0x03	; 3
     730:	41 e0       	ldi	r20, 0x01	; 1
     732:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     736:	8f e9       	ldi	r24, 0x9F	; 159
     738:	9f e0       	ldi	r25, 0x0F	; 15
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	f1 f7       	brne	.-4      	; 0x73a <send_falling_edge2+0xe>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <send_falling_edge2+0x14>
     740:	00 00       	nop
	_delay_ms(2);
	DIO_write('D',3,0);
     742:	84 e4       	ldi	r24, 0x44	; 68
     744:	63 e0       	ldi	r22, 0x03	; 3
     746:	40 e0       	ldi	r20, 0x00	; 0
     748:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
     74c:	8f e9       	ldi	r24, 0x9F	; 159
     74e:	9f e0       	ldi	r25, 0x0F	; 15
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <send_falling_edge2+0x24>
     754:	00 c0       	rjmp	.+0      	; 0x756 <send_falling_edge2+0x2a>
     756:	00 00       	nop
	_delay_ms(2);
}
     758:	08 95       	ret

0000075a <LCD2_vSend_cmd>:
void LCD2_vSend_cmd(char cmd)
{
     75a:	cf 93       	push	r28
     75c:	c8 2f       	mov	r28, r24
	DIO_write_port('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge2();
	
	#elif defined four_bits_mode
	write_high_nibble('D',cmd>>4);
     75e:	68 2f       	mov	r22, r24
     760:	62 95       	swap	r22
     762:	6f 70       	andi	r22, 0x0F	; 15
     764:	84 e4       	ldi	r24, 0x44	; 68
     766:	0e 94 ce 02 	call	0x59c	; 0x59c <write_high_nibble>
	DIO_write('B',7,0);
     76a:	82 e4       	ldi	r24, 0x42	; 66
     76c:	67 e0       	ldi	r22, 0x07	; 7
     76e:	40 e0       	ldi	r20, 0x00	; 0
     770:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	send_falling_edge2();
     774:	0e 94 96 03 	call	0x72c	; 0x72c <send_falling_edge2>
	write_high_nibble('A',cmd);
     778:	81 e4       	ldi	r24, 0x41	; 65
     77a:	6c 2f       	mov	r22, r28
     77c:	0e 94 ce 02 	call	0x59c	; 0x59c <write_high_nibble>
	DIO_write('B',7,0);
     780:	82 e4       	ldi	r24, 0x42	; 66
     782:	67 e0       	ldi	r22, 0x07	; 7
     784:	40 e0       	ldi	r20, 0x00	; 0
     786:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	send_falling_edge2();
     78a:	0e 94 96 03 	call	0x72c	; 0x72c <send_falling_edge2>
     78e:	8f ec       	ldi	r24, 0xCF	; 207
     790:	97 e0       	ldi	r25, 0x07	; 7
     792:	01 97       	sbiw	r24, 0x01	; 1
     794:	f1 f7       	brne	.-4      	; 0x792 <LCD2_vSend_cmd+0x38>
     796:	00 c0       	rjmp	.+0      	; 0x798 <LCD2_vSend_cmd+0x3e>
     798:	00 00       	nop
	#endif
	_delay_ms(1);
}
     79a:	cf 91       	pop	r28
     79c:	08 95       	ret

0000079e <send_falling_edge>:
}


static void send_falling_edge(void)
{
	DIO_write('A',EN,1);
     79e:	81 e4       	ldi	r24, 0x41	; 65
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	41 e0       	ldi	r20, 0x01	; 1
     7a4:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
     7a8:	8f e9       	ldi	r24, 0x9F	; 159
     7aa:	9f e0       	ldi	r25, 0x0F	; 15
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <send_falling_edge+0xe>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <send_falling_edge+0x14>
     7b2:	00 00       	nop
	_delay_ms(2);
	DIO_write('A',EN,0);
     7b4:	81 e4       	ldi	r24, 0x41	; 65
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	40 e0       	ldi	r20, 0x00	; 0
     7ba:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
     7be:	8f e9       	ldi	r24, 0x9F	; 159
     7c0:	9f e0       	ldi	r25, 0x0F	; 15
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	f1 f7       	brne	.-4      	; 0x7c2 <send_falling_edge+0x24>
     7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <send_falling_edge+0x2a>
     7c8:	00 00       	nop
	_delay_ms(2);
}
     7ca:	08 95       	ret

000007cc <LCD_vSend_cmd>:
void LCD_vSend_cmd(char cmd)
{
     7cc:	cf 93       	push	r28
     7ce:	c8 2f       	mov	r28, r24
	DIO_write_port('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('A',cmd>>4);
     7d0:	68 2f       	mov	r22, r24
     7d2:	62 95       	swap	r22
     7d4:	6f 70       	andi	r22, 0x0F	; 15
     7d6:	81 e4       	ldi	r24, 0x41	; 65
     7d8:	0e 94 ce 02 	call	0x59c	; 0x59c <write_high_nibble>
	DIO_write('A',RS,0);
     7dc:	81 e4       	ldi	r24, 0x41	; 65
     7de:	62 e0       	ldi	r22, 0x02	; 2
     7e0:	40 e0       	ldi	r20, 0x00	; 0
     7e2:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	send_falling_edge();
     7e6:	0e 94 cf 03 	call	0x79e	; 0x79e <send_falling_edge>
	write_high_nibble('A',cmd);
     7ea:	81 e4       	ldi	r24, 0x41	; 65
     7ec:	6c 2f       	mov	r22, r28
     7ee:	0e 94 ce 02 	call	0x59c	; 0x59c <write_high_nibble>
	DIO_write('A',RS,0);
     7f2:	81 e4       	ldi	r24, 0x41	; 65
     7f4:	62 e0       	ldi	r22, 0x02	; 2
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	send_falling_edge();
     7fc:	0e 94 cf 03 	call	0x79e	; 0x79e <send_falling_edge>
     800:	8f ec       	ldi	r24, 0xCF	; 207
     802:	97 e0       	ldi	r25, 0x07	; 7
     804:	01 97       	sbiw	r24, 0x01	; 1
     806:	f1 f7       	brne	.-4      	; 0x804 <LCD_vSend_cmd+0x38>
     808:	00 c0       	rjmp	.+0      	; 0x80a <LCD_vSend_cmd+0x3e>
     80a:	00 00       	nop
	#endif
	_delay_ms(1);
}
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <LCD_vInit>:
     810:	8f ef       	ldi	r24, 0xFF	; 255
     812:	91 ee       	ldi	r25, 0xE1	; 225
     814:	a4 e0       	ldi	r26, 0x04	; 4
     816:	81 50       	subi	r24, 0x01	; 1
     818:	90 40       	sbci	r25, 0x00	; 0
     81a:	a0 40       	sbci	r26, 0x00	; 0
     81c:	e1 f7       	brne	.-8      	; 0x816 <LCD_vInit+0x6>
     81e:	00 c0       	rjmp	.+0      	; 0x820 <LCD_vInit+0x10>
     820:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1); 
	
	#elif defined four_bits_mode
	DIO_vsetPINDir('A',4,1);
     822:	81 e4       	ldi	r24, 0x41	; 65
     824:	64 e0       	ldi	r22, 0x04	; 4
     826:	41 e0       	ldi	r20, 0x01	; 1
     828:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
     82c:	81 e4       	ldi	r24, 0x41	; 65
     82e:	65 e0       	ldi	r22, 0x05	; 5
     830:	41 e0       	ldi	r20, 0x01	; 1
     832:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
     836:	81 e4       	ldi	r24, 0x41	; 65
     838:	66 e0       	ldi	r22, 0x06	; 6
     83a:	41 e0       	ldi	r20, 0x01	; 1
     83c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
     840:	81 e4       	ldi	r24, 0x41	; 65
     842:	67 e0       	ldi	r22, 0x07	; 7
     844:	41 e0       	ldi	r20, 0x01	; 1
     846:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',EN,1);
     84a:	81 e4       	ldi	r24, 0x41	; 65
     84c:	60 e0       	ldi	r22, 0x00	; 0
     84e:	41 e0       	ldi	r20, 0x01	; 1
     850:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',RW,1);
     854:	81 e4       	ldi	r24, 0x41	; 65
     856:	61 e0       	ldi	r22, 0x01	; 1
     858:	41 e0       	ldi	r20, 0x01	; 1
     85a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',RS,1);
     85e:	81 e4       	ldi	r24, 0x41	; 65
     860:	62 e0       	ldi	r22, 0x02	; 2
     862:	41 e0       	ldi	r20, 0x01	; 1
     864:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
   	DIO_write('A',RW,0);
     868:	81 e4       	ldi	r24, 0x41	; 65
     86a:	61 e0       	ldi	r22, 0x01	; 1
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	LCD_vSend_cmd(RETURN_HOME); //return home
     872:	82 e0       	ldi	r24, 0x02	; 2
     874:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_vSend_cmd>
     878:	af e1       	ldi	r26, 0x1F	; 31
     87a:	be e4       	ldi	r27, 0x4E	; 78
     87c:	11 97       	sbiw	r26, 0x01	; 1
     87e:	f1 f7       	brne	.-4      	; 0x87c <__stack+0x1d>
     880:	00 c0       	rjmp	.+0      	; 0x882 <__stack+0x23>
     882:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS); //4bit mode
     884:	88 e2       	ldi	r24, 0x28	; 40
     886:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_vSend_cmd>
     88a:	8f ec       	ldi	r24, 0xCF	; 207
     88c:	97 e0       	ldi	r25, 0x07	; 7
     88e:	01 97       	sbiw	r24, 0x01	; 1
     890:	f1 f7       	brne	.-4      	; 0x88e <__stack+0x2f>
     892:	00 c0       	rjmp	.+0      	; 0x894 <__stack+0x35>
     894:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
     896:	8e e0       	ldi	r24, 0x0E	; 14
     898:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_vSend_cmd>
     89c:	af ec       	ldi	r26, 0xCF	; 207
     89e:	b7 e0       	ldi	r27, 0x07	; 7
     8a0:	11 97       	sbiw	r26, 0x01	; 1
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <__stack+0x41>
     8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <__stack+0x47>
     8a6:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_vSend_cmd>
     8ae:	8f e1       	ldi	r24, 0x1F	; 31
     8b0:	9e e4       	ldi	r25, 0x4E	; 78
     8b2:	01 97       	sbiw	r24, 0x01	; 1
     8b4:	f1 f7       	brne	.-4      	; 0x8b2 <__stack+0x53>
     8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <__stack+0x59>
     8b8:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
     8ba:	86 e0       	ldi	r24, 0x06	; 6
     8bc:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_vSend_cmd>
     8c0:	af ec       	ldi	r26, 0xCF	; 207
     8c2:	b7 e0       	ldi	r27, 0x07	; 7
     8c4:	11 97       	sbiw	r26, 0x01	; 1
     8c6:	f1 f7       	brne	.-4      	; 0x8c4 <__stack+0x65>
     8c8:	00 c0       	rjmp	.+0      	; 0x8ca <__stack+0x6b>
     8ca:	00 00       	nop
	_delay_ms(1);
	#endif
}
     8cc:	08 95       	ret

000008ce <LCD_vSend_char>:
	#endif
	_delay_ms(1);
}

void LCD_vSend_char(char data)
{
     8ce:	cf 93       	push	r28
     8d0:	c8 2f       	mov	r28, r24
	DIO_write_port('A',data);
	DIO_write('B',RS,1);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('A',data>>4);
     8d2:	68 2f       	mov	r22, r24
     8d4:	62 95       	swap	r22
     8d6:	6f 70       	andi	r22, 0x0F	; 15
     8d8:	81 e4       	ldi	r24, 0x41	; 65
     8da:	0e 94 ce 02 	call	0x59c	; 0x59c <write_high_nibble>
	DIO_write('A',RS,1);
     8de:	81 e4       	ldi	r24, 0x41	; 65
     8e0:	62 e0       	ldi	r22, 0x02	; 2
     8e2:	41 e0       	ldi	r20, 0x01	; 1
     8e4:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	send_falling_edge();
     8e8:	0e 94 cf 03 	call	0x79e	; 0x79e <send_falling_edge>
	write_high_nibble('A',data);
     8ec:	81 e4       	ldi	r24, 0x41	; 65
     8ee:	6c 2f       	mov	r22, r28
     8f0:	0e 94 ce 02 	call	0x59c	; 0x59c <write_high_nibble>
	DIO_write('A',RS,1);
     8f4:	81 e4       	ldi	r24, 0x41	; 65
     8f6:	62 e0       	ldi	r22, 0x02	; 2
     8f8:	41 e0       	ldi	r20, 0x01	; 1
     8fa:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	send_falling_edge();
     8fe:	0e 94 cf 03 	call	0x79e	; 0x79e <send_falling_edge>
     902:	8f ec       	ldi	r24, 0xCF	; 207
     904:	97 e0       	ldi	r25, 0x07	; 7
     906:	01 97       	sbiw	r24, 0x01	; 1
     908:	f1 f7       	brne	.-4      	; 0x906 <LCD_vSend_char+0x38>
     90a:	00 c0       	rjmp	.+0      	; 0x90c <LCD_vSend_char+0x3e>
     90c:	00 00       	nop
	#endif
	_delay_ms(1);
}
     90e:	cf 91       	pop	r28
     910:	08 95       	ret

00000912 <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	ec 01       	movw	r28, r24
	while((*data)!='\0')
     918:	88 81       	ld	r24, Y
     91a:	88 23       	and	r24, r24
     91c:	31 f0       	breq	.+12     	; 0x92a <LCD_vSend_string+0x18>
	#endif
	_delay_ms(1);
}


void LCD_vSend_string(char *data)
     91e:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
     920:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_vSend_char>
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
     924:	89 91       	ld	r24, Y+
     926:	88 23       	and	r24, r24
     928:	d9 f7       	brne	.-10     	; 0x920 <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	08 95       	ret

00000930 <LCD_clearscreen>:
void LCD_clearscreen()
{
	LCD_vSend_cmd(CLR_SCREEN);
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_vSend_cmd>
     936:	8f e1       	ldi	r24, 0x1F	; 31
     938:	9e e4       	ldi	r25, 0x4E	; 78
     93a:	01 97       	sbiw	r24, 0x01	; 1
     93c:	f1 f7       	brne	.-4      	; 0x93a <LCD_clearscreen+0xa>
     93e:	00 c0       	rjmp	.+0      	; 0x940 <LCD_clearscreen+0x10>
     940:	00 00       	nop
	_delay_ms(10);
}
     942:	08 95       	ret

00000944 <LCD_movecursor>:
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
     944:	28 2f       	mov	r18, r24
     946:	21 50       	subi	r18, 0x01	; 1
     948:	22 30       	cpi	r18, 0x02	; 2
     94a:	70 f4       	brcc	.+28     	; 0x968 <LCD_movecursor+0x24>
     94c:	61 31       	cpi	r22, 0x11	; 17
     94e:	70 f4       	brcc	.+28     	; 0x96c <LCD_movecursor+0x28>
     950:	66 23       	and	r22, r22
     952:	71 f0       	breq	.+28     	; 0x970 <LCD_movecursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
     954:	81 30       	cpi	r24, 0x01	; 1
     956:	19 f4       	brne	.+6      	; 0x95e <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
     958:	96 2f       	mov	r25, r22
     95a:	91 58       	subi	r25, 0x81	; 129
     95c:	0a c0       	rjmp	.+20     	; 0x972 <LCD_movecursor+0x2e>
	}
	else if (row==2)
     95e:	82 30       	cpi	r24, 0x02	; 2
     960:	41 f4       	brne	.+16     	; 0x972 <LCD_movecursor+0x2e>
	{
		data=0xc0+coloumn-1;
     962:	96 2f       	mov	r25, r22
     964:	91 54       	subi	r25, 0x41	; 65
     966:	05 c0       	rjmp	.+10     	; 0x972 <LCD_movecursor+0x2e>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
     968:	90 e8       	ldi	r25, 0x80	; 128
     96a:	03 c0       	rjmp	.+6      	; 0x972 <LCD_movecursor+0x2e>
     96c:	90 e8       	ldi	r25, 0x80	; 128
     96e:	01 c0       	rjmp	.+2      	; 0x972 <LCD_movecursor+0x2e>
     970:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vSend_cmd(data);
     972:	89 2f       	mov	r24, r25
     974:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_vSend_cmd>
     978:	8f ec       	ldi	r24, 0xCF	; 207
     97a:	97 e0       	ldi	r25, 0x07	; 7
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	f1 f7       	brne	.-4      	; 0x97c <LCD_movecursor+0x38>
     980:	00 c0       	rjmp	.+0      	; 0x982 <LCD_movecursor+0x3e>
     982:	00 00       	nop
	_delay_ms(1);
}
     984:	08 95       	ret

00000986 <LCD2_vInit>:
/*****************************************************************************************************/
void LCD2_vInit(void)
{
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	8f ef       	ldi	r24, 0xFF	; 255
     98c:	91 ee       	ldi	r25, 0xE1	; 225
     98e:	a4 e0       	ldi	r26, 0x04	; 4
     990:	81 50       	subi	r24, 0x01	; 1
     992:	90 40       	sbci	r25, 0x00	; 0
     994:	a0 40       	sbci	r26, 0x00	; 0
     996:	e1 f7       	brne	.-8      	; 0x990 <LCD2_vInit+0xa>
     998:	00 c0       	rjmp	.+0      	; 0x99a <LCD2_vInit+0x14>
     99a:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1);
	
	#elif defined four_bits_mode
	DIO_vsetPINDir('D',4,1);
     99c:	84 e4       	ldi	r24, 0x44	; 68
     99e:	64 e0       	ldi	r22, 0x04	; 4
     9a0:	41 e0       	ldi	r20, 0x01	; 1
     9a2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',5,1);
     9a6:	84 e4       	ldi	r24, 0x44	; 68
     9a8:	65 e0       	ldi	r22, 0x05	; 5
     9aa:	41 e0       	ldi	r20, 0x01	; 1
     9ac:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',6,1);
     9b0:	84 e4       	ldi	r24, 0x44	; 68
     9b2:	66 e0       	ldi	r22, 0x06	; 6
     9b4:	41 e0       	ldi	r20, 0x01	; 1
     9b6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',7,1);
     9ba:	84 e4       	ldi	r24, 0x44	; 68
     9bc:	67 e0       	ldi	r22, 0x07	; 7
     9be:	41 e0       	ldi	r20, 0x01	; 1
     9c0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',3,1);
     9c4:	84 e4       	ldi	r24, 0x44	; 68
     9c6:	63 e0       	ldi	r22, 0x03	; 3
     9c8:	41 e0       	ldi	r20, 0x01	; 1
     9ca:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',2,1);
     9ce:	84 e4       	ldi	r24, 0x44	; 68
     9d0:	62 e0       	ldi	r22, 0x02	; 2
     9d2:	41 e0       	ldi	r20, 0x01	; 1
     9d4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',7,1);
     9d8:	82 e4       	ldi	r24, 0x42	; 66
     9da:	67 e0       	ldi	r22, 0x07	; 7
     9dc:	41 e0       	ldi	r20, 0x01	; 1
     9de:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_write('D',2	,0);
     9e2:	84 e4       	ldi	r24, 0x44	; 68
     9e4:	62 e0       	ldi	r22, 0x02	; 2
     9e6:	40 e0       	ldi	r20, 0x00	; 0
     9e8:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	LCD2_vSend_cmd(RETURN_HOME); //return home
     9ec:	cd ea       	ldi	r28, 0xAD	; 173
     9ee:	d3 e0       	ldi	r29, 0x03	; 3
     9f0:	82 e0       	ldi	r24, 0x02	; 2
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	fe 01       	movw	r30, r28
     9f6:	09 95       	icall
     9f8:	af e1       	ldi	r26, 0x1F	; 31
     9fa:	be e4       	ldi	r27, 0x4E	; 78
     9fc:	11 97       	sbiw	r26, 0x01	; 1
     9fe:	f1 f7       	brne	.-4      	; 0x9fc <LCD2_vInit+0x76>
     a00:	00 c0       	rjmp	.+0      	; 0xa02 <LCD2_vInit+0x7c>
     a02:	00 00       	nop
	_delay_ms(10);
	LCD2_vSend_cmd(FOUR_BITS); //4bit mode
     a04:	88 e2       	ldi	r24, 0x28	; 40
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	fe 01       	movw	r30, r28
     a0a:	09 95       	icall
     a0c:	8f ec       	ldi	r24, 0xCF	; 207
     a0e:	97 e0       	ldi	r25, 0x07	; 7
     a10:	01 97       	sbiw	r24, 0x01	; 1
     a12:	f1 f7       	brne	.-4      	; 0xa10 <LCD2_vInit+0x8a>
     a14:	00 c0       	rjmp	.+0      	; 0xa16 <LCD2_vInit+0x90>
     a16:	00 00       	nop
	_delay_ms(1);
	LCD2_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
     a18:	8e e0       	ldi	r24, 0x0E	; 14
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	fe 01       	movw	r30, r28
     a1e:	09 95       	icall
     a20:	af ec       	ldi	r26, 0xCF	; 207
     a22:	b7 e0       	ldi	r27, 0x07	; 7
     a24:	11 97       	sbiw	r26, 0x01	; 1
     a26:	f1 f7       	brne	.-4      	; 0xa24 <LCD2_vInit+0x9e>
     a28:	00 c0       	rjmp	.+0      	; 0xa2a <LCD2_vInit+0xa4>
     a2a:	00 00       	nop
	_delay_ms(1);
	LCD2_vSend_cmd(CLR_SCREEN);//clear the screen
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	fe 01       	movw	r30, r28
     a32:	09 95       	icall
     a34:	8f e1       	ldi	r24, 0x1F	; 31
     a36:	9e e4       	ldi	r25, 0x4E	; 78
     a38:	01 97       	sbiw	r24, 0x01	; 1
     a3a:	f1 f7       	brne	.-4      	; 0xa38 <LCD2_vInit+0xb2>
     a3c:	00 c0       	rjmp	.+0      	; 0xa3e <LCD2_vInit+0xb8>
     a3e:	00 00       	nop
	_delay_ms(10);
	LCD2_vSend_cmd(ENTRY_MODE); //entry mode
     a40:	86 e0       	ldi	r24, 0x06	; 6
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	fe 01       	movw	r30, r28
     a46:	09 95       	icall
     a48:	af ec       	ldi	r26, 0xCF	; 207
     a4a:	b7 e0       	ldi	r27, 0x07	; 7
     a4c:	11 97       	sbiw	r26, 0x01	; 1
     a4e:	f1 f7       	brne	.-4      	; 0xa4c <LCD2_vInit+0xc6>
     a50:	00 c0       	rjmp	.+0      	; 0xa52 <LCD2_vInit+0xcc>
     a52:	00 00       	nop
	_delay_ms(1);
	#endif
}
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	08 95       	ret

00000a5a <LCD2_vSend_char>:
	#endif
	_delay_ms(1);
}

void LCD2_vSend_char(char data)
{
     a5a:	cf 93       	push	r28
     a5c:	c8 2f       	mov	r28, r24
	DIO_write_port('A',data);
	DIO_write('B',RS,1);
	send_falling_edge2();
	
	#elif defined four_bits_mode
	write_high_nibble('D',data>>4);
     a5e:	68 2f       	mov	r22, r24
     a60:	62 95       	swap	r22
     a62:	6f 70       	andi	r22, 0x0F	; 15
     a64:	84 e4       	ldi	r24, 0x44	; 68
     a66:	0e 94 ce 02 	call	0x59c	; 0x59c <write_high_nibble>
	DIO_write('B',7,1);
     a6a:	82 e4       	ldi	r24, 0x42	; 66
     a6c:	67 e0       	ldi	r22, 0x07	; 7
     a6e:	41 e0       	ldi	r20, 0x01	; 1
     a70:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	send_falling_edge2();
     a74:	0e 94 96 03 	call	0x72c	; 0x72c <send_falling_edge2>
	write_high_nibble('A',data);
     a78:	81 e4       	ldi	r24, 0x41	; 65
     a7a:	6c 2f       	mov	r22, r28
     a7c:	0e 94 ce 02 	call	0x59c	; 0x59c <write_high_nibble>
	DIO_write('B',7,1);
     a80:	82 e4       	ldi	r24, 0x42	; 66
     a82:	67 e0       	ldi	r22, 0x07	; 7
     a84:	41 e0       	ldi	r20, 0x01	; 1
     a86:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	send_falling_edge2();
     a8a:	0e 94 96 03 	call	0x72c	; 0x72c <send_falling_edge2>
     a8e:	8f ec       	ldi	r24, 0xCF	; 207
     a90:	97 e0       	ldi	r25, 0x07	; 7
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	f1 f7       	brne	.-4      	; 0xa92 <LCD2_vSend_char+0x38>
     a96:	00 c0       	rjmp	.+0      	; 0xa98 <LCD2_vSend_char+0x3e>
     a98:	00 00       	nop
	#endif
	_delay_ms(1);
}
     a9a:	cf 91       	pop	r28
     a9c:	08 95       	ret

00000a9e <LCD2_vSend_string>:


void LCD2_vSend_string(char *data)
{
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	ec 01       	movw	r28, r24
	while((*data)!='\0')
     aa4:	88 81       	ld	r24, Y
     aa6:	88 23       	and	r24, r24
     aa8:	31 f0       	breq	.+12     	; 0xab6 <LCD2_vSend_string+0x18>
	#endif
	_delay_ms(1);
}


void LCD2_vSend_string(char *data)
     aaa:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD2_vSend_char(*data);
     aac:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD2_vSend_char>
}


void LCD2_vSend_string(char *data)
{
	while((*data)!='\0')
     ab0:	89 91       	ld	r24, Y+
     ab2:	88 23       	and	r24, r24
     ab4:	d9 f7       	brne	.-10     	; 0xaac <LCD2_vSend_string+0xe>
	{
		LCD2_vSend_char(*data);
		data++;
	}
}
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	08 95       	ret

00000abc <LCD2_clearscreen>:
void LCD2_clearscreen()
{
	LCD2_vSend_cmd(CLR_SCREEN);
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD2_vSend_cmd>
     ac2:	8f e1       	ldi	r24, 0x1F	; 31
     ac4:	9e e4       	ldi	r25, 0x4E	; 78
     ac6:	01 97       	sbiw	r24, 0x01	; 1
     ac8:	f1 f7       	brne	.-4      	; 0xac6 <LCD2_clearscreen+0xa>
     aca:	00 c0       	rjmp	.+0      	; 0xacc <LCD2_clearscreen+0x10>
     acc:	00 00       	nop
	_delay_ms(10);
}
     ace:	08 95       	ret

00000ad0 <LCD2_movecursor>:
void LCD2_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
     ad0:	28 2f       	mov	r18, r24
     ad2:	21 50       	subi	r18, 0x01	; 1
     ad4:	22 30       	cpi	r18, 0x02	; 2
     ad6:	70 f4       	brcc	.+28     	; 0xaf4 <LCD2_movecursor+0x24>
     ad8:	61 31       	cpi	r22, 0x11	; 17
     ada:	70 f4       	brcc	.+28     	; 0xaf8 <LCD2_movecursor+0x28>
     adc:	66 23       	and	r22, r22
     ade:	71 f0       	breq	.+28     	; 0xafc <LCD2_movecursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
     ae0:	81 30       	cpi	r24, 0x01	; 1
     ae2:	19 f4       	brne	.+6      	; 0xaea <LCD2_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
     ae4:	96 2f       	mov	r25, r22
     ae6:	91 58       	subi	r25, 0x81	; 129
     ae8:	0a c0       	rjmp	.+20     	; 0xafe <LCD2_movecursor+0x2e>
	}
	else if (row==2)
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	41 f4       	brne	.+16     	; 0xafe <LCD2_movecursor+0x2e>
	{
		data=0xc0+coloumn-1;
     aee:	96 2f       	mov	r25, r22
     af0:	91 54       	subi	r25, 0x41	; 65
     af2:	05 c0       	rjmp	.+10     	; 0xafe <LCD2_movecursor+0x2e>
void LCD2_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
     af4:	90 e8       	ldi	r25, 0x80	; 128
     af6:	03 c0       	rjmp	.+6      	; 0xafe <LCD2_movecursor+0x2e>
     af8:	90 e8       	ldi	r25, 0x80	; 128
     afa:	01 c0       	rjmp	.+2      	; 0xafe <LCD2_movecursor+0x2e>
     afc:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD2_vSend_cmd(data);
     afe:	89 2f       	mov	r24, r25
     b00:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD2_vSend_cmd>
     b04:	8f ec       	ldi	r24, 0xCF	; 207
     b06:	97 e0       	ldi	r25, 0x07	; 7
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <LCD2_movecursor+0x38>
     b0c:	00 c0       	rjmp	.+0      	; 0xb0e <LCD2_movecursor+0x3e>
     b0e:	00 00       	nop
	_delay_ms(1);
     b10:	08 95       	ret

00000b12 <__vector_5>:
	}
	
}

ISR(TIMER2_OVF_vect)
{
     b12:	1f 92       	push	r1
     b14:	0f 92       	push	r0
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	0f 92       	push	r0
     b1a:	11 24       	eor	r1, r1
     b1c:	8f 93       	push	r24
	x++;
     b1e:	80 91 84 01 	lds	r24, 0x0184
     b22:	8f 5f       	subi	r24, 0xFF	; 255
     b24:	80 93 84 01 	sts	0x0184, r24
	if(x>=30)
     b28:	80 91 84 01 	lds	r24, 0x0184
     b2c:	8e 31       	cpi	r24, 0x1E	; 30
     b2e:	38 f0       	brcs	.+14     	; 0xb3e <__vector_5+0x2c>
	{
		x=0;
     b30:	10 92 84 01 	sts	0x0184, r1
		seconds_counter++;
     b34:	80 91 87 01 	lds	r24, 0x0187
     b38:	8f 5f       	subi	r24, 0xFF	; 255
     b3a:	80 93 87 01 	sts	0x0187, r24
	}		
}
     b3e:	8f 91       	pop	r24
     b40:	0f 90       	pop	r0
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	0f 90       	pop	r0
     b46:	1f 90       	pop	r1
     b48:	18 95       	reti

00000b4a <__vector_13>:
ISR(USART_RXC_vect){
     b4a:	1f 92       	push	r1
     b4c:	0f 92       	push	r0
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	0f 92       	push	r0
     b52:	11 24       	eor	r1, r1
     b54:	8f 93       	push	r24
	reset_flag=UDR;
     b56:	8c b1       	in	r24, 0x0c	; 12
     b58:	80 93 78 01 	sts	0x0178, r24
}
     b5c:	8f 91       	pop	r24
     b5e:	0f 90       	pop	r0
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	0f 90       	pop	r0
     b64:	1f 90       	pop	r1
     b66:	18 95       	reti

00000b68 <numberOfAlarms>:
unsigned char numberOfAlarms(){
     b68:	cf 93       	push	r28
	char i=0;
     b6a:	c0 e0       	ldi	r28, 0x00	; 0
	while(1)
	{
		if(EEPROM_read(EEPROM_SATRTING_ADDRESS+i)!=NOTPRESSED)
     b6c:	8c 2f       	mov	r24, r28
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
     b74:	8f 3f       	cpi	r24, 0xFF	; 255
     b76:	11 f0       	breq	.+4      	; 0xb7c <numberOfAlarms+0x14>
			i++;
     b78:	cf 5f       	subi	r28, 0xFF	; 255
		else
			break;
	}
     b7a:	f8 cf       	rjmp	.-16     	; 0xb6c <numberOfAlarms+0x4>
	return i/2;
}
     b7c:	8c 2f       	mov	r24, r28
     b7e:	86 95       	lsr	r24
     b80:	cf 91       	pop	r28
     b82:	08 95       	ret

00000b84 <availableLocation>:
 signed short availableLocation()
{
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
	signed short avbLoc=-1;
	for(int i=0;i<8;i++)
     b88:	c0 e0       	ldi	r28, 0x00	; 0
     b8a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(EEPROM_read(EEPROM_SATRTING_ADDRESS+i)==NOTPRESSED)
     b8c:	ce 01       	movw	r24, r28
     b8e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
     b92:	8f 3f       	cpi	r24, 0xFF	; 255
     b94:	39 f0       	breq	.+14     	; 0xba4 <availableLocation+0x20>
	return i/2;
}
 signed short availableLocation()
{
	signed short avbLoc=-1;
	for(int i=0;i<8;i++)
     b96:	21 96       	adiw	r28, 0x01	; 1
     b98:	c8 30       	cpi	r28, 0x08	; 8
     b9a:	d1 05       	cpc	r29, r1
     b9c:	b9 f7       	brne	.-18     	; 0xb8c <availableLocation+0x8>
	}
	return i/2;
}
 signed short availableLocation()
{
	signed short avbLoc=-1;
     b9e:	8f ef       	ldi	r24, 0xFF	; 255
     ba0:	9f ef       	ldi	r25, 0xFF	; 255
     ba2:	01 c0       	rjmp	.+2      	; 0xba6 <availableLocation+0x22>
	for(int i=0;i<8;i++)
	{
		if(EEPROM_read(EEPROM_SATRTING_ADDRESS+i)==NOTPRESSED)
     ba4:	ce 01       	movw	r24, r28
			avbLoc=EEPROM_SATRTING_ADDRESS+i;
			break;
		}
	}
	return avbLoc;
}
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	08 95       	ret

00000bac <main>:
int main(void)
{
	unsigned char Alarm_timeout;
	unsigned char delete_index=-1;
	signed short availableSlot;
	DIO_set_port_direction('D',1);
     bac:	84 e4       	ldi	r24, 0x44	; 68
     bae:	61 e0       	ldi	r22, 0x01	; 1
     bb0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <DIO_set_port_direction>
	DIO_vsetPINDir('A',3,1);
     bb4:	81 e4       	ldi	r24, 0x41	; 65
     bb6:	63 e0       	ldi	r22, 0x03	; 3
     bb8:	41 e0       	ldi	r20, 0x01	; 1
     bba:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	UART_vInit(9600UL);
     bbe:	60 e8       	ldi	r22, 0x80	; 128
     bc0:	75 e2       	ldi	r23, 0x25	; 37
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_vInit>
	LCD_vInit();
     bca:	0e 94 08 04 	call	0x810	; 0x810 <LCD_vInit>
	LCD2_vInit();
     bce:	0e 94 c3 04 	call	0x986	; 0x986 <LCD2_vInit>
	seven_seg_vinit('B');
     bd2:	82 e4       	ldi	r24, 0x42	; 66
     bd4:	0e 94 c0 0a 	call	0x1580	; 0x1580 <seven_seg_vinit>
	SET_BIT(DDRC,0);
     bd8:	a0 9a       	sbi	0x14, 0	; 20
    SET_BIT(DDRC,1);
     bda:	a1 9a       	sbi	0x14, 1	; 20
	SET_BIT(DDRC,2);
     bdc:	a2 9a       	sbi	0x14, 2	; 20
	SET_BIT(DDRC,3);
     bde:	a3 9a       	sbi	0x14, 3	; 20
	SET_BIT(DDRC,4);
     be0:	a4 9a       	sbi	0x14, 4	; 20
	SET_BIT(DDRC,5);
     be2:	a5 9a       	sbi	0x14, 5	; 20
	LCD_vSend_string("1: set clock");
     be4:	80 e7       	ldi	r24, 0x70	; 112
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
	LCD_movecursor(2,1);
     bec:	82 e0       	ldi	r24, 0x02	; 2
     bee:	61 e0       	ldi	r22, 0x01	; 1
     bf0:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_movecursor>
	LCD_vSend_string("2: add alarm");
     bf4:	8d e7       	ldi	r24, 0x7D	; 125
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
	LCD2_vSend_string("3: remove alarm");
     bfc:	8a e8       	ldi	r24, 0x8A	; 138
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCD2_vSend_string>
	LCD2_movecursor(2,1);
     c04:	82 e0       	ldi	r24, 0x02	; 2
     c06:	61 e0       	ldi	r22, 0x01	; 1
     c08:	0e 94 68 05 	call	0xad0	; 0xad0 <LCD2_movecursor>
	LCD2_vSend_string("4: show alarms");
     c0c:	8a e9       	ldi	r24, 0x9A	; 154
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCD2_vSend_string>
	timer2_overflow_init_interrupt();
     c14:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <timer2_overflow_init_interrupt>
	UART_vInterruptEnable();
     c18:	0e 94 88 0b 	call	0x1710	; 0x1710 <UART_vInterruptEnable>
				} while (second_digit==NOTPRESSED);
				LCD_vSend_char(second_digit);
				_delay_ms(300);
				seconds_counter=(second_digit-48)+10*(first_digit-48);
				LCD_clearscreen();
				LCD_vSend_string("1 to set clock");
     c1c:	0f 2e       	mov	r0, r31
     c1e:	f8 ec       	ldi	r31, 0xC8	; 200
     c20:	6f 2e       	mov	r6, r31
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	7f 2e       	mov	r7, r31
     c26:	f0 2d       	mov	r31, r0
				LCD_movecursor(2,1);
				LCD_vSend_string("2 to add alarm");
     c28:	0f 2e       	mov	r0, r31
     c2a:	f7 ed       	ldi	r31, 0xD7	; 215
     c2c:	4f 2e       	mov	r4, r31
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	5f 2e       	mov	r5, r31
     c32:	f0 2d       	mov	r31, r0
				LCD2_vSend_string("3: remove alarm");
     c34:	0f 2e       	mov	r0, r31
     c36:	fa e8       	ldi	r31, 0x8A	; 138
     c38:	2f 2e       	mov	r2, r31
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	3f 2e       	mov	r3, r31
     c3e:	f0 2d       	mov	r31, r0
	LCD2_movecursor(2,1);
	LCD2_vSend_string("4: show alarms");
	timer2_overflow_init_interrupt();
	UART_vInterruptEnable();
	while(1)
	{		availableSlot=availableLocation();
     c40:	0e 94 c2 05 	call	0xb84	; 0xb84 <availableLocation>
     c44:	ec 01       	movw	r28, r24
			DIO_write('A',3,0);
     c46:	81 e4       	ldi	r24, 0x41	; 65
     c48:	63 e0       	ldi	r22, 0x03	; 3
     c4a:	40 e0       	ldi	r20, 0x00	; 0
     c4c:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
			if (reset_flag==SET_TIME)
     c50:	80 91 78 01 	lds	r24, 0x0178
     c54:	81 33       	cpi	r24, 0x31	; 49
     c56:	09 f0       	breq	.+2      	; 0xc5a <main+0xae>
     c58:	d5 c0       	rjmp	.+426    	; 0xe04 <main+0x258>
			{	reset_flag='0';
     c5a:	80 e3       	ldi	r24, 0x30	; 48
     c5c:	80 93 78 01 	sts	0x0178, r24
				UART_vInterruptDisable();
     c60:	0e 94 8a 0b 	call	0x1714	; 0x1714 <UART_vInterruptDisable>
				LCD_clearscreen();
     c64:	0e 94 98 04 	call	0x930	; 0x930 <LCD_clearscreen>
				LCD2_clearscreen();
     c68:	0e 94 5e 05 	call	0xabc	; 0xabc <LCD2_clearscreen>
				LCD_vSend_string("hours=--");
     c6c:	89 ea       	ldi	r24, 0xA9	; 169
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
				LCD_movecursor(1,7);
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	67 e0       	ldi	r22, 0x07	; 7
     c78:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_movecursor>
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	94 e3       	ldi	r25, 0x34	; 52
     c80:	ac e0       	ldi	r26, 0x0C	; 12
     c82:	81 50       	subi	r24, 0x01	; 1
     c84:	90 40       	sbci	r25, 0x00	; 0
     c86:	a0 40       	sbci	r26, 0x00	; 0
     c88:	e1 f7       	brne	.-8      	; 0xc82 <main+0xd6>
     c8a:	00 c0       	rjmp	.+0      	; 0xc8c <main+0xe0>
     c8c:	00 00       	nop
				_delay_ms(500);
				do
				{
					first_digit=UART_u8ReceiveData();
     c8e:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <UART_u8ReceiveData>
     c92:	80 93 88 01 	sts	0x0188, r24
					
				} while (first_digit==NOTPRESSED);
     c96:	8f 3f       	cpi	r24, 0xFF	; 255
     c98:	d1 f3       	breq	.-12     	; 0xc8e <main+0xe2>
				LCD_vSend_char(first_digit);
     c9a:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_vSend_char>
     c9e:	8f ef       	ldi	r24, 0xFF	; 255
     ca0:	92 e5       	ldi	r25, 0x52	; 82
     ca2:	a7 e0       	ldi	r26, 0x07	; 7
     ca4:	81 50       	subi	r24, 0x01	; 1
     ca6:	90 40       	sbci	r25, 0x00	; 0
     ca8:	a0 40       	sbci	r26, 0x00	; 0
     caa:	e1 f7       	brne	.-8      	; 0xca4 <main+0xf8>
     cac:	00 c0       	rjmp	.+0      	; 0xcae <main+0x102>
     cae:	00 00       	nop
				_delay_ms(300);
				do
				{
					second_digit=UART_u8ReceiveData();
     cb0:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <UART_u8ReceiveData>
     cb4:	80 93 89 01 	sts	0x0189, r24
					
				} while (second_digit==NOTPRESSED);
     cb8:	8f 3f       	cpi	r24, 0xFF	; 255
     cba:	d1 f3       	breq	.-12     	; 0xcb0 <main+0x104>
				LCD_vSend_char(second_digit);
     cbc:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_vSend_char>
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
     cc2:	92 e5       	ldi	r25, 0x52	; 82
     cc4:	a7 e0       	ldi	r26, 0x07	; 7
     cc6:	81 50       	subi	r24, 0x01	; 1
     cc8:	90 40       	sbci	r25, 0x00	; 0
     cca:	a0 40       	sbci	r26, 0x00	; 0
     ccc:	e1 f7       	brne	.-8      	; 0xcc6 <main+0x11a>
     cce:	00 c0       	rjmp	.+0      	; 0xcd0 <main+0x124>
     cd0:	00 00       	nop
				_delay_ms(300);
				hours_counter=(second_digit-48)+10*(first_digit-48);
     cd2:	90 91 89 01 	lds	r25, 0x0189
     cd6:	90 51       	subi	r25, 0x10	; 16
     cd8:	80 91 88 01 	lds	r24, 0x0188
     cdc:	88 0f       	add	r24, r24
     cde:	28 2f       	mov	r18, r24
     ce0:	22 0f       	add	r18, r18
     ce2:	22 0f       	add	r18, r18
     ce4:	82 0f       	add	r24, r18
     ce6:	89 0f       	add	r24, r25
     ce8:	80 93 85 01 	sts	0x0185, r24
				LCD_clearscreen();
     cec:	0e 94 98 04 	call	0x930	; 0x930 <LCD_clearscreen>
				
				LCD_vSend_string("minutes=--");
     cf0:	82 eb       	ldi	r24, 0xB2	; 178
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
				LCD_movecursor(1,9);
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	69 e0       	ldi	r22, 0x09	; 9
     cfc:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_movecursor>
				do
				{
					first_digit=UART_u8ReceiveData();
     d00:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <UART_u8ReceiveData>
     d04:	80 93 88 01 	sts	0x0188, r24
					
				} while (first_digit==NOTPRESSED);
     d08:	8f 3f       	cpi	r24, 0xFF	; 255
     d0a:	d1 f3       	breq	.-12     	; 0xd00 <main+0x154>
				LCD_vSend_char(first_digit);
     d0c:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_vSend_char>
     d10:	8f ef       	ldi	r24, 0xFF	; 255
     d12:	92 e5       	ldi	r25, 0x52	; 82
     d14:	a7 e0       	ldi	r26, 0x07	; 7
     d16:	81 50       	subi	r24, 0x01	; 1
     d18:	90 40       	sbci	r25, 0x00	; 0
     d1a:	a0 40       	sbci	r26, 0x00	; 0
     d1c:	e1 f7       	brne	.-8      	; 0xd16 <main+0x16a>
     d1e:	00 c0       	rjmp	.+0      	; 0xd20 <main+0x174>
     d20:	00 00       	nop
				_delay_ms(300);
				do
				{
					second_digit=UART_u8ReceiveData();
     d22:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <UART_u8ReceiveData>
     d26:	80 93 89 01 	sts	0x0189, r24
					
				} while (second_digit==NOTPRESSED);
     d2a:	8f 3f       	cpi	r24, 0xFF	; 255
     d2c:	d1 f3       	breq	.-12     	; 0xd22 <main+0x176>
				LCD_vSend_char(second_digit);
     d2e:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_vSend_char>
     d32:	8f ef       	ldi	r24, 0xFF	; 255
     d34:	92 e5       	ldi	r25, 0x52	; 82
     d36:	a7 e0       	ldi	r26, 0x07	; 7
     d38:	81 50       	subi	r24, 0x01	; 1
     d3a:	90 40       	sbci	r25, 0x00	; 0
     d3c:	a0 40       	sbci	r26, 0x00	; 0
     d3e:	e1 f7       	brne	.-8      	; 0xd38 <main+0x18c>
     d40:	00 c0       	rjmp	.+0      	; 0xd42 <main+0x196>
     d42:	00 00       	nop
				_delay_ms(300);
				minutes_counter=(second_digit-48)+10*(first_digit-48);
     d44:	90 91 89 01 	lds	r25, 0x0189
     d48:	90 51       	subi	r25, 0x10	; 16
     d4a:	80 91 88 01 	lds	r24, 0x0188
     d4e:	88 0f       	add	r24, r24
     d50:	28 2f       	mov	r18, r24
     d52:	22 0f       	add	r18, r18
     d54:	22 0f       	add	r18, r18
     d56:	82 0f       	add	r24, r18
     d58:	89 0f       	add	r24, r25
     d5a:	80 93 86 01 	sts	0x0186, r24
				LCD_clearscreen();
     d5e:	0e 94 98 04 	call	0x930	; 0x930 <LCD_clearscreen>
				
				LCD_vSend_string("seconds=--");
     d62:	8d eb       	ldi	r24, 0xBD	; 189
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
				LCD_movecursor(1,9);
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	69 e0       	ldi	r22, 0x09	; 9
     d6e:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_movecursor>
				
				do 
				{
					first_digit=UART_u8ReceiveData();
     d72:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <UART_u8ReceiveData>
     d76:	80 93 88 01 	sts	0x0188, r24
					
				} while (first_digit==NOTPRESSED);
     d7a:	8f 3f       	cpi	r24, 0xFF	; 255
     d7c:	d1 f3       	breq	.-12     	; 0xd72 <main+0x1c6>
				LCD_vSend_char(first_digit);
     d7e:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_vSend_char>
     d82:	8f ef       	ldi	r24, 0xFF	; 255
     d84:	92 e5       	ldi	r25, 0x52	; 82
     d86:	a7 e0       	ldi	r26, 0x07	; 7
     d88:	81 50       	subi	r24, 0x01	; 1
     d8a:	90 40       	sbci	r25, 0x00	; 0
     d8c:	a0 40       	sbci	r26, 0x00	; 0
     d8e:	e1 f7       	brne	.-8      	; 0xd88 <main+0x1dc>
     d90:	00 c0       	rjmp	.+0      	; 0xd92 <main+0x1e6>
     d92:	00 00       	nop
				_delay_ms(300);
				do
				{
					second_digit=UART_u8ReceiveData();
     d94:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <UART_u8ReceiveData>
     d98:	80 93 89 01 	sts	0x0189, r24
					
				} while (second_digit==NOTPRESSED);
     d9c:	8f 3f       	cpi	r24, 0xFF	; 255
     d9e:	d1 f3       	breq	.-12     	; 0xd94 <main+0x1e8>
				LCD_vSend_char(second_digit);
     da0:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_vSend_char>
     da4:	8f ef       	ldi	r24, 0xFF	; 255
     da6:	92 e5       	ldi	r25, 0x52	; 82
     da8:	a7 e0       	ldi	r26, 0x07	; 7
     daa:	81 50       	subi	r24, 0x01	; 1
     dac:	90 40       	sbci	r25, 0x00	; 0
     dae:	a0 40       	sbci	r26, 0x00	; 0
     db0:	e1 f7       	brne	.-8      	; 0xdaa <main+0x1fe>
     db2:	00 c0       	rjmp	.+0      	; 0xdb4 <main+0x208>
     db4:	00 00       	nop
				_delay_ms(300);
				seconds_counter=(second_digit-48)+10*(first_digit-48);
     db6:	90 91 89 01 	lds	r25, 0x0189
     dba:	90 51       	subi	r25, 0x10	; 16
     dbc:	80 91 88 01 	lds	r24, 0x0188
     dc0:	88 0f       	add	r24, r24
     dc2:	28 2f       	mov	r18, r24
     dc4:	22 0f       	add	r18, r18
     dc6:	22 0f       	add	r18, r18
     dc8:	82 0f       	add	r24, r18
     dca:	89 0f       	add	r24, r25
     dcc:	80 93 87 01 	sts	0x0187, r24
				LCD_clearscreen();
     dd0:	0e 94 98 04 	call	0x930	; 0x930 <LCD_clearscreen>
				LCD_vSend_string("1 to set clock");
     dd4:	c3 01       	movw	r24, r6
     dd6:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
				LCD_movecursor(2,1);
     dda:	82 e0       	ldi	r24, 0x02	; 2
     ddc:	61 e0       	ldi	r22, 0x01	; 1
     dde:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_movecursor>
				LCD_vSend_string("2 to add alarm");
     de2:	c2 01       	movw	r24, r4
     de4:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
				LCD2_vSend_string("3: remove alarm");
     de8:	c1 01       	movw	r24, r2
     dea:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCD2_vSend_string>
				LCD2_movecursor(2,1);
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	61 e0       	ldi	r22, 0x01	; 1
     df2:	0e 94 68 05 	call	0xad0	; 0xad0 <LCD2_movecursor>
				LCD2_vSend_string("4: show alarms");
     df6:	8a e9       	ldi	r24, 0x9A	; 154
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCD2_vSend_string>
				LCD2_vSend_string("working");
				LCD_movecursor(1,5);
				LCD_vSend_string("Look at");
				LCD_movecursor(2,7);
				LCD_vSend_string("GUI");
				for(int i=0,j=0;i<8;i+=2,j++)
     dfe:	c0 e0       	ldi	r28, 0x00	; 0
     e00:	d0 e0       	ldi	r29, 0x00	; 0
     e02:	f7 c2       	rjmp	.+1518   	; 0x13f2 <main+0x846>
				LCD_vSend_string("2 to add alarm");
				LCD2_vSend_string("3: remove alarm");
				LCD2_movecursor(2,1);
				LCD2_vSend_string("4: show alarms");
			}
			else if(reset_flag==ADD_ALARM)
     e04:	80 91 78 01 	lds	r24, 0x0178
     e08:	82 33       	cpi	r24, 0x32	; 50
     e0a:	09 f0       	breq	.+2      	; 0xe0e <main+0x262>
     e0c:	fe c0       	rjmp	.+508    	; 0x100a <main+0x45e>
			{
				reset_flag='0';
     e0e:	80 e3       	ldi	r24, 0x30	; 48
     e10:	80 93 78 01 	sts	0x0178, r24
				UART_vInterruptDisable();
     e14:	0e 94 8a 0b 	call	0x1714	; 0x1714 <UART_vInterruptDisable>
				if(availableSlot==-1)
     e18:	9f ef       	ldi	r25, 0xFF	; 255
     e1a:	cf 3f       	cpi	r28, 0xFF	; 255
     e1c:	d9 07       	cpc	r29, r25
     e1e:	09 f0       	breq	.+2      	; 0xe22 <main+0x276>
     e20:	47 c0       	rjmp	.+142    	; 0xeb0 <main+0x304>
				{
					LCD_clearscreen();
     e22:	0e 94 98 04 	call	0x930	; 0x930 <LCD_clearscreen>
					LCD2_clearscreen();
     e26:	0e 94 5e 05 	call	0xabc	; 0xabc <LCD2_clearscreen>
					LCD_movecursor(1,3);
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	63 e0       	ldi	r22, 0x03	; 3
     e2e:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_movecursor>
					LCD_vSend_string("Sorry!");
     e32:	86 ee       	ldi	r24, 0xE6	; 230
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
					LCD2_movecursor(1,3);
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	63 e0       	ldi	r22, 0x03	; 3
     e3e:	0e 94 68 05 	call	0xad0	; 0xad0 <LCD2_movecursor>
					LCD2_vSend_string("Maximum Number");
     e42:	8d ee       	ldi	r24, 0xED	; 237
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCD2_vSend_string>
					LCD2_movecursor(2,5);
     e4a:	82 e0       	ldi	r24, 0x02	; 2
     e4c:	65 e0       	ldi	r22, 0x05	; 5
     e4e:	0e 94 68 05 	call	0xad0	; 0xad0 <LCD2_movecursor>
					LCD2_vSend_string("Reached");
     e52:	8c ef       	ldi	r24, 0xFC	; 252
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCD2_vSend_string>
     e5a:	8f ef       	ldi	r24, 0xFF	; 255
     e5c:	9e e9       	ldi	r25, 0x9E	; 158
     e5e:	a4 e2       	ldi	r26, 0x24	; 36
     e60:	81 50       	subi	r24, 0x01	; 1
     e62:	90 40       	sbci	r25, 0x00	; 0
     e64:	a0 40       	sbci	r26, 0x00	; 0
     e66:	e1 f7       	brne	.-8      	; 0xe60 <main+0x2b4>
     e68:	00 c0       	rjmp	.+0      	; 0xe6a <main+0x2be>
     e6a:	00 00       	nop
					_delay_ms(1500);
					LCD_clearscreen();
     e6c:	0e 94 98 04 	call	0x930	; 0x930 <LCD_clearscreen>
					LCD_vSend_string("1 to set clock");
     e70:	c3 01       	movw	r24, r6
     e72:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
					LCD_movecursor(2,1);
     e76:	82 e0       	ldi	r24, 0x02	; 2
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_movecursor>
					LCD_vSend_string("2 to add alarm");
     e7e:	c2 01       	movw	r24, r4
     e80:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
					LCD2_clearscreen();
     e84:	0e 94 5e 05 	call	0xabc	; 0xabc <LCD2_clearscreen>
					LCD2_vSend_string("3: remove alarm");
     e88:	c1 01       	movw	r24, r2
     e8a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCD2_vSend_string>
					LCD2_movecursor(2,1);
     e8e:	82 e0       	ldi	r24, 0x02	; 2
     e90:	61 e0       	ldi	r22, 0x01	; 1
     e92:	0e 94 68 05 	call	0xad0	; 0xad0 <LCD2_movecursor>
					LCD2_vSend_string("4: show alarms");
     e96:	8a e9       	ldi	r24, 0x9A	; 154
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCD2_vSend_string>
					second_digit+=2;
     e9e:	80 91 89 01 	lds	r24, 0x0189
     ea2:	8e 5f       	subi	r24, 0xFE	; 254
     ea4:	80 93 89 01 	sts	0x0189, r24
					UART_vSendData('0');
     ea8:	80 e3       	ldi	r24, 0x30	; 48
     eaa:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <UART_vSendData>
					continue;
     eae:	c8 ce       	rjmp	.-624    	; 0xc40 <main+0x94>
					
				}
				UART_vSendData('1');
     eb0:	81 e3       	ldi	r24, 0x31	; 49
     eb2:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <UART_vSendData>
				LCD2_clearscreen();
     eb6:	0e 94 5e 05 	call	0xabc	; 0xabc <LCD2_clearscreen>
				LCD2_movecursor(1,3);
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	63 e0       	ldi	r22, 0x03	; 3
     ebe:	0e 94 68 05 	call	0xad0	; 0xad0 <LCD2_movecursor>
				LCD2_vSend_string("Adding new");
     ec2:	84 e0       	ldi	r24, 0x04	; 4
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCD2_vSend_string>
				LCD2_movecursor(2,6);
     eca:	82 e0       	ldi	r24, 0x02	; 2
     ecc:	66 e0       	ldi	r22, 0x06	; 6
     ece:	0e 94 68 05 	call	0xad0	; 0xad0 <LCD2_movecursor>
				LCD2_vSend_string("ALarm");
     ed2:	8f e0       	ldi	r24, 0x0F	; 15
     ed4:	91 e0       	ldi	r25, 0x01	; 1
     ed6:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCD2_vSend_string>
				LCD_clearscreen();
     eda:	0e 94 98 04 	call	0x930	; 0x930 <LCD_clearscreen>
				LCD_vSend_string("hours=--");
     ede:	89 ea       	ldi	r24, 0xA9	; 169
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
				LCD_movecursor(1,7);
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	67 e0       	ldi	r22, 0x07	; 7
     eea:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_movecursor>
     eee:	8f ef       	ldi	r24, 0xFF	; 255
     ef0:	94 e3       	ldi	r25, 0x34	; 52
     ef2:	ac e0       	ldi	r26, 0x0C	; 12
     ef4:	81 50       	subi	r24, 0x01	; 1
     ef6:	90 40       	sbci	r25, 0x00	; 0
     ef8:	a0 40       	sbci	r26, 0x00	; 0
     efa:	e1 f7       	brne	.-8      	; 0xef4 <main+0x348>
     efc:	00 c0       	rjmp	.+0      	; 0xefe <main+0x352>
     efe:	00 00       	nop
				_delay_ms(500);
				do
				{
					first_digit=UART_u8ReceiveData();
     f00:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <UART_u8ReceiveData>
     f04:	80 93 88 01 	sts	0x0188, r24
					
				} while (first_digit==NOTPRESSED);
     f08:	8f 3f       	cpi	r24, 0xFF	; 255
     f0a:	d1 f3       	breq	.-12     	; 0xf00 <main+0x354>
				LCD_vSend_char(first_digit);
     f0c:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_vSend_char>
     f10:	8f ef       	ldi	r24, 0xFF	; 255
     f12:	92 e5       	ldi	r25, 0x52	; 82
     f14:	a7 e0       	ldi	r26, 0x07	; 7
     f16:	81 50       	subi	r24, 0x01	; 1
     f18:	90 40       	sbci	r25, 0x00	; 0
     f1a:	a0 40       	sbci	r26, 0x00	; 0
     f1c:	e1 f7       	brne	.-8      	; 0xf16 <main+0x36a>
     f1e:	00 c0       	rjmp	.+0      	; 0xf20 <main+0x374>
     f20:	00 00       	nop
				_delay_ms(300);
				do
				{
					second_digit=UART_u8ReceiveData();
     f22:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <UART_u8ReceiveData>
     f26:	80 93 89 01 	sts	0x0189, r24
					
				} while (second_digit==NOTPRESSED);
     f2a:	8f 3f       	cpi	r24, 0xFF	; 255
     f2c:	d1 f3       	breq	.-12     	; 0xf22 <main+0x376>
				LCD_vSend_char(second_digit);
     f2e:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_vSend_char>
     f32:	8f ef       	ldi	r24, 0xFF	; 255
     f34:	92 e5       	ldi	r25, 0x52	; 82
     f36:	a7 e0       	ldi	r26, 0x07	; 7
     f38:	81 50       	subi	r24, 0x01	; 1
     f3a:	90 40       	sbci	r25, 0x00	; 0
     f3c:	a0 40       	sbci	r26, 0x00	; 0
     f3e:	e1 f7       	brne	.-8      	; 0xf38 <main+0x38c>
     f40:	00 c0       	rjmp	.+0      	; 0xf42 <main+0x396>
     f42:	00 00       	nop
				_delay_ms(300);
				EEPROM_write(availableSlot,(second_digit-48)+10*(first_digit-48));
     f44:	60 91 89 01 	lds	r22, 0x0189
     f48:	60 51       	subi	r22, 0x10	; 16
     f4a:	80 91 88 01 	lds	r24, 0x0188
     f4e:	88 0f       	add	r24, r24
     f50:	98 2f       	mov	r25, r24
     f52:	99 0f       	add	r25, r25
     f54:	99 0f       	add	r25, r25
     f56:	89 0f       	add	r24, r25
     f58:	68 0f       	add	r22, r24
     f5a:	ce 01       	movw	r24, r28
     f5c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_write>
				LCD_clearscreen();
     f60:	0e 94 98 04 	call	0x930	; 0x930 <LCD_clearscreen>
				
				LCD_vSend_string("minutes=--");
     f64:	82 eb       	ldi	r24, 0xB2	; 178
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
				LCD_movecursor(1,9);
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	69 e0       	ldi	r22, 0x09	; 9
     f70:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_movecursor>
				do
				{
					first_digit=UART_u8ReceiveData();
     f74:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <UART_u8ReceiveData>
     f78:	80 93 88 01 	sts	0x0188, r24
					
				} while (first_digit==NOTPRESSED);
     f7c:	8f 3f       	cpi	r24, 0xFF	; 255
     f7e:	d1 f3       	breq	.-12     	; 0xf74 <main+0x3c8>
				LCD_vSend_char(first_digit);
     f80:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_vSend_char>
     f84:	8f ef       	ldi	r24, 0xFF	; 255
     f86:	92 e5       	ldi	r25, 0x52	; 82
     f88:	a7 e0       	ldi	r26, 0x07	; 7
     f8a:	81 50       	subi	r24, 0x01	; 1
     f8c:	90 40       	sbci	r25, 0x00	; 0
     f8e:	a0 40       	sbci	r26, 0x00	; 0
     f90:	e1 f7       	brne	.-8      	; 0xf8a <main+0x3de>
     f92:	00 c0       	rjmp	.+0      	; 0xf94 <main+0x3e8>
     f94:	00 00       	nop
				_delay_ms(300);
				do
				{
					second_digit=UART_u8ReceiveData();
     f96:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <UART_u8ReceiveData>
     f9a:	80 93 89 01 	sts	0x0189, r24
					
				} while (second_digit==NOTPRESSED);
     f9e:	8f 3f       	cpi	r24, 0xFF	; 255
     fa0:	d1 f3       	breq	.-12     	; 0xf96 <main+0x3ea>
				LCD_vSend_char(second_digit);
     fa2:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_vSend_char>
     fa6:	8f ef       	ldi	r24, 0xFF	; 255
     fa8:	92 e5       	ldi	r25, 0x52	; 82
     faa:	a7 e0       	ldi	r26, 0x07	; 7
     fac:	81 50       	subi	r24, 0x01	; 1
     fae:	90 40       	sbci	r25, 0x00	; 0
     fb0:	a0 40       	sbci	r26, 0x00	; 0
     fb2:	e1 f7       	brne	.-8      	; 0xfac <main+0x400>
     fb4:	00 c0       	rjmp	.+0      	; 0xfb6 <main+0x40a>
     fb6:	00 00       	nop
				_delay_ms(300);
				EEPROM_write(availableSlot+1,(second_digit-48)+10*(first_digit-48));
     fb8:	60 91 89 01 	lds	r22, 0x0189
     fbc:	60 51       	subi	r22, 0x10	; 16
     fbe:	80 91 88 01 	lds	r24, 0x0188
     fc2:	88 0f       	add	r24, r24
     fc4:	98 2f       	mov	r25, r24
     fc6:	99 0f       	add	r25, r25
     fc8:	99 0f       	add	r25, r25
     fca:	89 0f       	add	r24, r25
     fcc:	68 0f       	add	r22, r24
     fce:	ce 01       	movw	r24, r28
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_write>
				LCD_clearscreen();
     fd6:	0e 94 98 04 	call	0x930	; 0x930 <LCD_clearscreen>
				LCD_vSend_string("1 to set clock");
     fda:	c3 01       	movw	r24, r6
     fdc:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
				LCD_movecursor(2,1);
     fe0:	82 e0       	ldi	r24, 0x02	; 2
     fe2:	61 e0       	ldi	r22, 0x01	; 1
     fe4:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_movecursor>
				LCD_vSend_string("2 to add alarm");
     fe8:	c2 01       	movw	r24, r4
     fea:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
				LCD2_clearscreen();
     fee:	0e 94 5e 05 	call	0xabc	; 0xabc <LCD2_clearscreen>
				LCD2_vSend_string("3: remove alarm");
     ff2:	c1 01       	movw	r24, r2
     ff4:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCD2_vSend_string>
				LCD2_movecursor(2,1);
     ff8:	82 e0       	ldi	r24, 0x02	; 2
     ffa:	61 e0       	ldi	r22, 0x01	; 1
     ffc:	0e 94 68 05 	call	0xad0	; 0xad0 <LCD2_movecursor>
				LCD2_vSend_string("4: show alarms");
    1000:	8a e9       	ldi	r24, 0x9A	; 154
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCD2_vSend_string>
    1008:	fa ce       	rjmp	.-524    	; 0xdfe <main+0x252>
			}
			else if(reset_flag==SHOW_ALARMS)
    100a:	80 91 78 01 	lds	r24, 0x0178
    100e:	84 33       	cpi	r24, 0x34	; 52
    1010:	09 f0       	breq	.+2      	; 0x1014 <main+0x468>
    1012:	d0 c0       	rjmp	.+416    	; 0x11b4 <main+0x608>
			{
				reset_flag='0';
    1014:	80 e3       	ldi	r24, 0x30	; 48
    1016:	80 93 78 01 	sts	0x0178, r24
				LCD_clearscreen();
    101a:	0e 94 98 04 	call	0x930	; 0x930 <LCD_clearscreen>
				LCD2_clearscreen();
    101e:	0e 94 5e 05 	call	0xabc	; 0xabc <LCD2_clearscreen>
				LCD2_movecursor(1,2);
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	62 e0       	ldi	r22, 0x02	; 2
    1026:	0e 94 68 05 	call	0xad0	; 0xad0 <LCD2_movecursor>
				LCD2_vSend_string("Clock is still");
    102a:	85 e1       	ldi	r24, 0x15	; 21
    102c:	91 e0       	ldi	r25, 0x01	; 1
    102e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCD2_vSend_string>
				LCD2_movecursor(2,5);
    1032:	82 e0       	ldi	r24, 0x02	; 2
    1034:	65 e0       	ldi	r22, 0x05	; 5
    1036:	0e 94 68 05 	call	0xad0	; 0xad0 <LCD2_movecursor>
				LCD2_vSend_string("working");
    103a:	84 e2       	ldi	r24, 0x24	; 36
    103c:	91 e0       	ldi	r25, 0x01	; 1
    103e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCD2_vSend_string>
    1042:	aa 24       	eor	r10, r10
    1044:	bb 24       	eor	r11, r11
    1046:	a3 94       	inc	r10
    1048:	cc 24       	eor	r12, r12
    104a:	dd 24       	eor	r13, r13
    104c:	68 94       	set
    104e:	c1 f8       	bld	r12, 1
    1050:	c0 e0       	ldi	r28, 0x00	; 0
    1052:	d0 e0       	ldi	r29, 0x00	; 0
				for(int i=0,j=0;i<8;i+=2,j++)
				{
					if((EEPROM_read(EEPROM_SATRTING_ADDRESS+i)!=NOTPRESSED))
					{	LCD_vSend_char(i+'1'-j);
						LCD_vSend_char('-');
						LCD_vSend_char((EEPROM_read(EEPROM_SATRTING_ADDRESS+i)/10)+'0');
    1054:	0a e0       	ldi	r16, 0x0A	; 10
    1056:	08 c0       	rjmp	.+16     	; 0x1068 <main+0x4bc>
				LCD_clearscreen();
				LCD2_clearscreen();
				LCD2_movecursor(1,2);
				LCD2_vSend_string("Clock is still");
				LCD2_movecursor(2,5);
				LCD2_vSend_string("working");
    1058:	22 96       	adiw	r28, 0x02	; 2
    105a:	a2 e0       	ldi	r26, 0x02	; 2
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	ca 0e       	add	r12, r26
    1060:	db 1e       	adc	r13, r27
    1062:	08 94       	sec
    1064:	a1 1c       	adc	r10, r1
    1066:	b1 1c       	adc	r11, r1
				for(int i=0,j=0;i<8;i+=2,j++)
				{
					if((EEPROM_read(EEPROM_SATRTING_ADDRESS+i)!=NOTPRESSED))
    1068:	ce 01       	movw	r24, r28
    106a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
    106e:	8f 3f       	cpi	r24, 0xFF	; 255
    1070:	09 f4       	brne	.+2      	; 0x1074 <main+0x4c8>
    1072:	5b c0       	rjmp	.+182    	; 0x112a <main+0x57e>
					{	LCD_vSend_char(i+'1'-j);
    1074:	8a 2d       	mov	r24, r10
    1076:	80 5d       	subi	r24, 0xD0	; 208
    1078:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_vSend_char>
						LCD_vSend_char('-');
    107c:	8d e2       	ldi	r24, 0x2D	; 45
    107e:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_vSend_char>
						LCD_vSend_char((EEPROM_read(EEPROM_SATRTING_ADDRESS+i)/10)+'0');
    1082:	ce 01       	movw	r24, r28
    1084:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
    1088:	60 2f       	mov	r22, r16
    108a:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__udivmodqi4>
    108e:	80 5d       	subi	r24, 0xD0	; 208
    1090:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_vSend_char>
						LCD_vSend_char((EEPROM_read(EEPROM_SATRTING_ADDRESS+i)%10)+'0');
    1094:	ce 01       	movw	r24, r28
    1096:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
    109a:	60 2f       	mov	r22, r16
    109c:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__udivmodqi4>
    10a0:	89 2f       	mov	r24, r25
    10a2:	80 5d       	subi	r24, 0xD0	; 208
    10a4:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_vSend_char>
						LCD_vSend_char(':');
    10a8:	8a e3       	ldi	r24, 0x3A	; 58
    10aa:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_vSend_char>
unsigned char minutes_counter=0,hours_counter=0;
unsigned char value,first_digit,second_digit;
volatile unsigned char x=0;
signed short availableLocation();

int main(void)
    10ae:	7e 01       	movw	r14, r28
    10b0:	08 94       	sec
    10b2:	e1 1c       	adc	r14, r1
    10b4:	f1 1c       	adc	r15, r1
					{	LCD_vSend_char(i+'1'-j);
						LCD_vSend_char('-');
						LCD_vSend_char((EEPROM_read(EEPROM_SATRTING_ADDRESS+i)/10)+'0');
						LCD_vSend_char((EEPROM_read(EEPROM_SATRTING_ADDRESS+i)%10)+'0');
						LCD_vSend_char(':');
						LCD_vSend_char((EEPROM_read(EEPROM_SATRTING_ADDRESS+i+1)/10)+'0');
    10b6:	c7 01       	movw	r24, r14
    10b8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
    10bc:	60 2f       	mov	r22, r16
    10be:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__udivmodqi4>
    10c2:	80 5d       	subi	r24, 0xD0	; 208
    10c4:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_vSend_char>
						LCD_vSend_char((EEPROM_read(EEPROM_SATRTING_ADDRESS+i+1)%10)+'0');
    10c8:	c7 01       	movw	r24, r14
    10ca:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
    10ce:	60 2f       	mov	r22, r16
    10d0:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__udivmodqi4>
    10d4:	89 2f       	mov	r24, r25
    10d6:	80 5d       	subi	r24, 0xD0	; 208
    10d8:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_vSend_char>
						UART_vSendData((EEPROM_read(EEPROM_SATRTING_ADDRESS+i)/10)+'0');
    10dc:	ce 01       	movw	r24, r28
    10de:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
    10e2:	60 2f       	mov	r22, r16
    10e4:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__udivmodqi4>
    10e8:	80 5d       	subi	r24, 0xD0	; 208
    10ea:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <UART_vSendData>
						UART_vSendData((EEPROM_read(EEPROM_SATRTING_ADDRESS+i)%10)+'0');
    10ee:	ce 01       	movw	r24, r28
    10f0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
    10f4:	60 2f       	mov	r22, r16
    10f6:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__udivmodqi4>
    10fa:	89 2f       	mov	r24, r25
    10fc:	80 5d       	subi	r24, 0xD0	; 208
    10fe:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <UART_vSendData>
						UART_vSendData((EEPROM_read(EEPROM_SATRTING_ADDRESS+i+1)/10)+'0');
    1102:	c7 01       	movw	r24, r14
    1104:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
    1108:	60 2f       	mov	r22, r16
    110a:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__udivmodqi4>
    110e:	80 5d       	subi	r24, 0xD0	; 208
    1110:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <UART_vSendData>
						UART_vSendData((EEPROM_read(EEPROM_SATRTING_ADDRESS+i+1)%10)+'0');
    1114:	c7 01       	movw	r24, r14
    1116:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
    111a:	60 2f       	mov	r22, r16
    111c:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__udivmodqi4>
    1120:	89 2f       	mov	r24, r25
    1122:	80 5d       	subi	r24, 0xD0	; 208
    1124:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <UART_vSendData>
    1128:	0c c0       	rjmp	.+24     	; 0x1142 <main+0x596>
					}
					else
					{
						UART_vSendData('F');
    112a:	86 e4       	ldi	r24, 0x46	; 70
    112c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <UART_vSendData>
						UART_vSendData('F');
    1130:	86 e4       	ldi	r24, 0x46	; 70
    1132:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <UART_vSendData>
						UART_vSendData('F');
    1136:	86 e4       	ldi	r24, 0x46	; 70
    1138:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <UART_vSendData>
						UART_vSendData('F');
    113c:	86 e4       	ldi	r24, 0x46	; 70
    113e:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <UART_vSendData>
					}
					if(i==2)
    1142:	c2 30       	cpi	r28, 0x02	; 2
    1144:	d1 05       	cpc	r29, r1
    1146:	29 f4       	brne	.+10     	; 0x1152 <main+0x5a6>
					LCD_movecursor(2,1);
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	61 e0       	ldi	r22, 0x01	; 1
    114c:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_movecursor>
    1150:	83 cf       	rjmp	.-250    	; 0x1058 <main+0x4ac>
					else
					LCD_vSend_string("  ");
    1152:	8c e2       	ldi	r24, 0x2C	; 44
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
				LCD2_clearscreen();
				LCD2_movecursor(1,2);
				LCD2_vSend_string("Clock is still");
				LCD2_movecursor(2,5);
				LCD2_vSend_string("working");
				for(int i=0,j=0;i<8;i+=2,j++)
    115a:	b8 e0       	ldi	r27, 0x08	; 8
    115c:	cb 16       	cp	r12, r27
    115e:	d1 04       	cpc	r13, r1
    1160:	0c f4       	brge	.+2      	; 0x1164 <main+0x5b8>
    1162:	7a cf       	rjmp	.-268    	; 0x1058 <main+0x4ac>
    1164:	8f ef       	ldi	r24, 0xFF	; 255
    1166:	97 ea       	ldi	r25, 0xA7	; 167
    1168:	a1 e6       	ldi	r26, 0x61	; 97
    116a:	81 50       	subi	r24, 0x01	; 1
    116c:	90 40       	sbci	r25, 0x00	; 0
    116e:	a0 40       	sbci	r26, 0x00	; 0
    1170:	e1 f7       	brne	.-8      	; 0x116a <main+0x5be>
    1172:	00 c0       	rjmp	.+0      	; 0x1174 <main+0x5c8>
    1174:	00 00       	nop
					LCD_movecursor(2,1);
					else
					LCD_vSend_string("  ");
				}
				_delay_ms(4000);
				second_digit+=4500;
    1176:	80 91 89 01 	lds	r24, 0x0189
    117a:	8c 56       	subi	r24, 0x6C	; 108
    117c:	80 93 89 01 	sts	0x0189, r24
				LCD_clearscreen();
    1180:	0e 94 98 04 	call	0x930	; 0x930 <LCD_clearscreen>
				LCD_vSend_string("1 to set clock");
    1184:	c3 01       	movw	r24, r6
    1186:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
				LCD_movecursor(2,1);
    118a:	82 e0       	ldi	r24, 0x02	; 2
    118c:	61 e0       	ldi	r22, 0x01	; 1
    118e:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_movecursor>
				LCD_vSend_string("2 to add alarm");
    1192:	c2 01       	movw	r24, r4
    1194:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
				LCD2_clearscreen();
    1198:	0e 94 5e 05 	call	0xabc	; 0xabc <LCD2_clearscreen>
				LCD2_vSend_string("3: remove alarm");
    119c:	c1 01       	movw	r24, r2
    119e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCD2_vSend_string>
				LCD2_movecursor(2,1);
    11a2:	82 e0       	ldi	r24, 0x02	; 2
    11a4:	61 e0       	ldi	r22, 0x01	; 1
    11a6:	0e 94 68 05 	call	0xad0	; 0xad0 <LCD2_movecursor>
				LCD2_vSend_string("4: show alarms");
    11aa:	8a e9       	ldi	r24, 0x9A	; 154
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCD2_vSend_string>
    11b2:	25 ce       	rjmp	.-950    	; 0xdfe <main+0x252>
				
			}
			else if(reset_flag==REMOVE_ALARM)
    11b4:	80 91 78 01 	lds	r24, 0x0178
    11b8:	83 33       	cpi	r24, 0x33	; 51
    11ba:	09 f0       	breq	.+2      	; 0x11be <main+0x612>
    11bc:	e0 c0       	rjmp	.+448    	; 0x137e <main+0x7d2>
			{
				UART_vInterruptDisable();
    11be:	0e 94 8a 0b 	call	0x1714	; 0x1714 <UART_vInterruptDisable>
				reset_flag='0';
    11c2:	80 e3       	ldi	r24, 0x30	; 48
    11c4:	80 93 78 01 	sts	0x0178, r24
				LCD_clearscreen();
    11c8:	0e 94 98 04 	call	0x930	; 0x930 <LCD_clearscreen>
				LCD2_clearscreen();
    11cc:	0e 94 5e 05 	call	0xabc	; 0xabc <LCD2_clearscreen>
				LCD2_movecursor(1,2);
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	62 e0       	ldi	r22, 0x02	; 2
    11d4:	0e 94 68 05 	call	0xad0	; 0xad0 <LCD2_movecursor>
				LCD2_vSend_string("Clock is still");
    11d8:	85 e1       	ldi	r24, 0x15	; 21
    11da:	91 e0       	ldi	r25, 0x01	; 1
    11dc:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCD2_vSend_string>
				LCD2_movecursor(2,5);
    11e0:	82 e0       	ldi	r24, 0x02	; 2
    11e2:	65 e0       	ldi	r22, 0x05	; 5
    11e4:	0e 94 68 05 	call	0xad0	; 0xad0 <LCD2_movecursor>
				LCD2_vSend_string("working");
    11e8:	84 e2       	ldi	r24, 0x24	; 36
    11ea:	91 e0       	ldi	r25, 0x01	; 1
    11ec:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCD2_vSend_string>
				LCD_movecursor(1,5);
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	65 e0       	ldi	r22, 0x05	; 5
    11f4:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_movecursor>
				LCD_vSend_string("Look at");
    11f8:	8f e2       	ldi	r24, 0x2F	; 47
    11fa:	91 e0       	ldi	r25, 0x01	; 1
    11fc:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
				LCD_movecursor(2,7);
    1200:	82 e0       	ldi	r24, 0x02	; 2
    1202:	67 e0       	ldi	r22, 0x07	; 7
    1204:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_movecursor>
				LCD_vSend_string("GUI");
    1208:	87 e3       	ldi	r24, 0x37	; 55
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
				for(int i=0,j=0;i<8;i+=2,j++)
    1210:	c0 e0       	ldi	r28, 0x00	; 0
    1212:	d0 e0       	ldi	r29, 0x00	; 0
				{	if((EEPROM_read(EEPROM_SATRTING_ADDRESS+i)!=NOTPRESSED))
					{
						UART_vSendData((EEPROM_read(EEPROM_SATRTING_ADDRESS+i)/10)+'0');
    1214:	0a e0       	ldi	r16, 0x0A	; 10
				LCD_movecursor(1,5);
				LCD_vSend_string("Look at");
				LCD_movecursor(2,7);
				LCD_vSend_string("GUI");
				for(int i=0,j=0;i<8;i+=2,j++)
				{	if((EEPROM_read(EEPROM_SATRTING_ADDRESS+i)!=NOTPRESSED))
    1216:	ce 01       	movw	r24, r28
    1218:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
    121c:	8f 3f       	cpi	r24, 0xFF	; 255
    121e:	59 f1       	breq	.+86     	; 0x1276 <main+0x6ca>
					{
						UART_vSendData((EEPROM_read(EEPROM_SATRTING_ADDRESS+i)/10)+'0');
    1220:	ce 01       	movw	r24, r28
    1222:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
    1226:	60 2f       	mov	r22, r16
    1228:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__udivmodqi4>
    122c:	80 5d       	subi	r24, 0xD0	; 208
    122e:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <UART_vSendData>
						UART_vSendData((EEPROM_read(EEPROM_SATRTING_ADDRESS+i)%10)+'0');
    1232:	ce 01       	movw	r24, r28
    1234:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
    1238:	60 2f       	mov	r22, r16
    123a:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__udivmodqi4>
    123e:	89 2f       	mov	r24, r25
    1240:	80 5d       	subi	r24, 0xD0	; 208
    1242:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <UART_vSendData>
unsigned char minutes_counter=0,hours_counter=0;
unsigned char value,first_digit,second_digit;
volatile unsigned char x=0;
signed short availableLocation();

int main(void)
    1246:	7e 01       	movw	r14, r28
    1248:	08 94       	sec
    124a:	e1 1c       	adc	r14, r1
    124c:	f1 1c       	adc	r15, r1
				for(int i=0,j=0;i<8;i+=2,j++)
				{	if((EEPROM_read(EEPROM_SATRTING_ADDRESS+i)!=NOTPRESSED))
					{
						UART_vSendData((EEPROM_read(EEPROM_SATRTING_ADDRESS+i)/10)+'0');
						UART_vSendData((EEPROM_read(EEPROM_SATRTING_ADDRESS+i)%10)+'0');
						UART_vSendData((EEPROM_read(EEPROM_SATRTING_ADDRESS+i+1)/10)+'0');
    124e:	c7 01       	movw	r24, r14
    1250:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
    1254:	60 2f       	mov	r22, r16
    1256:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__udivmodqi4>
    125a:	80 5d       	subi	r24, 0xD0	; 208
    125c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <UART_vSendData>
						UART_vSendData((EEPROM_read(EEPROM_SATRTING_ADDRESS+i+1)%10)+'0');
    1260:	c7 01       	movw	r24, r14
    1262:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
    1266:	60 2f       	mov	r22, r16
    1268:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__udivmodqi4>
    126c:	89 2f       	mov	r24, r25
    126e:	80 5d       	subi	r24, 0xD0	; 208
    1270:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <UART_vSendData>
    1274:	0c c0       	rjmp	.+24     	; 0x128e <main+0x6e2>
					}
					else
					{
						UART_vSendData('F');
    1276:	86 e4       	ldi	r24, 0x46	; 70
    1278:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <UART_vSendData>
						UART_vSendData('F');
    127c:	86 e4       	ldi	r24, 0x46	; 70
    127e:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <UART_vSendData>
						UART_vSendData('F');
    1282:	86 e4       	ldi	r24, 0x46	; 70
    1284:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <UART_vSendData>
						UART_vSendData('F');
    1288:	86 e4       	ldi	r24, 0x46	; 70
    128a:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <UART_vSendData>
				LCD2_vSend_string("working");
				LCD_movecursor(1,5);
				LCD_vSend_string("Look at");
				LCD_movecursor(2,7);
				LCD_vSend_string("GUI");
				for(int i=0,j=0;i<8;i+=2,j++)
    128e:	22 96       	adiw	r28, 0x02	; 2
    1290:	c8 30       	cpi	r28, 0x08	; 8
    1292:	d1 05       	cpc	r29, r1
    1294:	09 f0       	breq	.+2      	; 0x1298 <main+0x6ec>
    1296:	bf cf       	rjmp	.-130    	; 0x1216 <main+0x66a>
    1298:	8f ef       	ldi	r24, 0xFF	; 255
    129a:	94 e3       	ldi	r25, 0x34	; 52
    129c:	ac e0       	ldi	r26, 0x0C	; 12
    129e:	81 50       	subi	r24, 0x01	; 1
    12a0:	90 40       	sbci	r25, 0x00	; 0
    12a2:	a0 40       	sbci	r26, 0x00	; 0
    12a4:	e1 f7       	brne	.-8      	; 0x129e <main+0x6f2>
    12a6:	00 c0       	rjmp	.+0      	; 0x12a8 <main+0x6fc>
    12a8:	00 00       	nop
						UART_vSendData('F');
						UART_vSendData('F');
					}
				}
				_delay_ms(500);
				LCD_clearscreen();
    12aa:	0e 94 98 04 	call	0x930	; 0x930 <LCD_clearscreen>
				LCD_vSend_string("Delete Alarm No:");
    12ae:	8b e3       	ldi	r24, 0x3B	; 59
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
				LCD_movecursor(2,4);
    12b6:	82 e0       	ldi	r24, 0x02	; 2
    12b8:	64 e0       	ldi	r22, 0x04	; 4
    12ba:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_movecursor>
				LCD_vSend_string("0 to back");
    12be:	8c e4       	ldi	r24, 0x4C	; 76
    12c0:	91 e0       	ldi	r25, 0x01	; 1
    12c2:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
				LCD_movecursor(1,17);
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	61 e1       	ldi	r22, 0x11	; 17
    12ca:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_movecursor>
				delete_index=UART_u8ReceiveData();
    12ce:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <UART_u8ReceiveData>
				if(delete_index!=0)
    12d2:	88 23       	and	r24, r24
    12d4:	b9 f1       	breq	.+110    	; 0x1344 <main+0x798>
				{	
					switch(delete_index)
    12d6:	82 33       	cpi	r24, 0x32	; 50
    12d8:	a9 f0       	breq	.+42     	; 0x1304 <main+0x758>
    12da:	83 33       	cpi	r24, 0x33	; 51
    12dc:	18 f4       	brcc	.+6      	; 0x12e4 <main+0x738>
    12de:	81 33       	cpi	r24, 0x31	; 49
    12e0:	89 f5       	brne	.+98     	; 0x1344 <main+0x798>
    12e2:	05 c0       	rjmp	.+10     	; 0x12ee <main+0x742>
    12e4:	83 33       	cpi	r24, 0x33	; 51
    12e6:	c9 f0       	breq	.+50     	; 0x131a <main+0x76e>
    12e8:	84 33       	cpi	r24, 0x34	; 52
    12ea:	61 f5       	brne	.+88     	; 0x1344 <main+0x798>
    12ec:	21 c0       	rjmp	.+66     	; 0x1330 <main+0x784>
					{
						case '1':EEPROM_write(EEPROM_SATRTING_ADDRESS,0XFF);
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	6f ef       	ldi	r22, 0xFF	; 255
    12f4:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_write>
								EEPROM_write(EEPROM_SATRTING_ADDRESS+1,0XFF);
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	6f ef       	ldi	r22, 0xFF	; 255
    12fe:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_write>
								break;
    1302:	20 c0       	rjmp	.+64     	; 0x1344 <main+0x798>
						case '2':EEPROM_write(EEPROM_SATRTING_ADDRESS+2,0XFF);
    1304:	82 e0       	ldi	r24, 0x02	; 2
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	6f ef       	ldi	r22, 0xFF	; 255
    130a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_write>
						EEPROM_write(EEPROM_SATRTING_ADDRESS+3,0XFF);
    130e:	83 e0       	ldi	r24, 0x03	; 3
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	6f ef       	ldi	r22, 0xFF	; 255
    1314:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_write>
						break;
    1318:	15 c0       	rjmp	.+42     	; 0x1344 <main+0x798>
						case '3':EEPROM_write(EEPROM_SATRTING_ADDRESS+4,0XFF);
    131a:	84 e0       	ldi	r24, 0x04	; 4
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	6f ef       	ldi	r22, 0xFF	; 255
    1320:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_write>
						EEPROM_write(EEPROM_SATRTING_ADDRESS+5,0XFF);
    1324:	85 e0       	ldi	r24, 0x05	; 5
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	6f ef       	ldi	r22, 0xFF	; 255
    132a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_write>
						break;
    132e:	0a c0       	rjmp	.+20     	; 0x1344 <main+0x798>
						case '4':EEPROM_write(EEPROM_SATRTING_ADDRESS+6,0XFF);
    1330:	86 e0       	ldi	r24, 0x06	; 6
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	6f ef       	ldi	r22, 0xFF	; 255
    1336:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_write>
						EEPROM_write(EEPROM_SATRTING_ADDRESS+7,0XFF);
    133a:	87 e0       	ldi	r24, 0x07	; 7
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	6f ef       	ldi	r22, 0xFF	; 255
    1340:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_write>
						break;
						default:break;
					}
					
				}				
				second_digit+=600;
    1344:	80 91 89 01 	lds	r24, 0x0189
    1348:	88 5a       	subi	r24, 0xA8	; 168
    134a:	80 93 89 01 	sts	0x0189, r24
				LCD_vSend_string("1 to set clock");
    134e:	c3 01       	movw	r24, r6
    1350:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
				LCD_movecursor(2,1);
    1354:	82 e0       	ldi	r24, 0x02	; 2
    1356:	61 e0       	ldi	r22, 0x01	; 1
    1358:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_movecursor>
				LCD_vSend_string("2 to add alarm");
    135c:	c2 01       	movw	r24, r4
    135e:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
				LCD2_clearscreen();
    1362:	0e 94 5e 05 	call	0xabc	; 0xabc <LCD2_clearscreen>
				LCD2_vSend_string("3: remove alarm");
    1366:	c1 01       	movw	r24, r2
    1368:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCD2_vSend_string>
				LCD2_movecursor(2,1);
    136c:	82 e0       	ldi	r24, 0x02	; 2
    136e:	61 e0       	ldi	r22, 0x01	; 1
    1370:	0e 94 68 05 	call	0xad0	; 0xad0 <LCD2_movecursor>
				LCD2_vSend_string("4: show alarms");
    1374:	8a e9       	ldi	r24, 0x9A	; 154
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCD2_vSend_string>
    137c:	40 cd       	rjmp	.-1408   	; 0xdfe <main+0x252>
				
			}
			else if(reset_flag!=ADD_ALARM && reset_flag!=SET_TIME && reset_flag!='0' && reset_flag!=REMOVE_ALARM &&reset_flag!=SHOW_ALARMS )
    137e:	80 91 78 01 	lds	r24, 0x0178
    1382:	82 33       	cpi	r24, 0x32	; 50
    1384:	09 f4       	brne	.+2      	; 0x1388 <main+0x7dc>
    1386:	3b cd       	rjmp	.-1418   	; 0xdfe <main+0x252>
    1388:	80 91 78 01 	lds	r24, 0x0178
    138c:	81 33       	cpi	r24, 0x31	; 49
    138e:	09 f4       	brne	.+2      	; 0x1392 <main+0x7e6>
    1390:	36 cd       	rjmp	.-1428   	; 0xdfe <main+0x252>
    1392:	80 91 78 01 	lds	r24, 0x0178
    1396:	80 33       	cpi	r24, 0x30	; 48
    1398:	09 f4       	brne	.+2      	; 0x139c <main+0x7f0>
    139a:	31 cd       	rjmp	.-1438   	; 0xdfe <main+0x252>
    139c:	80 91 78 01 	lds	r24, 0x0178
    13a0:	83 33       	cpi	r24, 0x33	; 51
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <main+0x7fa>
    13a4:	2c cd       	rjmp	.-1448   	; 0xdfe <main+0x252>
    13a6:	80 91 78 01 	lds	r24, 0x0178
    13aa:	84 33       	cpi	r24, 0x34	; 52
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <main+0x804>
    13ae:	27 cd       	rjmp	.-1458   	; 0xdfe <main+0x252>
			{
				LCD_clearscreen();
    13b0:	0e 94 98 04 	call	0x930	; 0x930 <LCD_clearscreen>
				LCD_vSend_string("wrong choice");
    13b4:	86 e5       	ldi	r24, 0x56	; 86
    13b6:	91 e0       	ldi	r25, 0x01	; 1
    13b8:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
    13bc:	8f ef       	ldi	r24, 0xFF	; 255
    13be:	99 e6       	ldi	r25, 0x69	; 105
    13c0:	a8 e1       	ldi	r26, 0x18	; 24
    13c2:	81 50       	subi	r24, 0x01	; 1
    13c4:	90 40       	sbci	r25, 0x00	; 0
    13c6:	a0 40       	sbci	r26, 0x00	; 0
    13c8:	e1 f7       	brne	.-8      	; 0x13c2 <main+0x816>
    13ca:	00 c0       	rjmp	.+0      	; 0x13cc <main+0x820>
    13cc:	00 00       	nop
				_delay_ms(1000);
				LCD_clearscreen();
    13ce:	0e 94 98 04 	call	0x930	; 0x930 <LCD_clearscreen>
				LCD_vSend_string("press 1 to");
    13d2:	83 e6       	ldi	r24, 0x63	; 99
    13d4:	91 e0       	ldi	r25, 0x01	; 1
    13d6:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
				LCD_movecursor(2,1);
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	61 e0       	ldi	r22, 0x01	; 1
    13de:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_movecursor>
				LCD_vSend_string("set clock");
    13e2:	8e e6       	ldi	r24, 0x6E	; 110
    13e4:	91 e0       	ldi	r25, 0x01	; 1
    13e6:	0e 94 89 04 	call	0x912	; 0x912 <LCD_vSend_string>
				reset_flag='0';
    13ea:	80 e3       	ldi	r24, 0x30	; 48
    13ec:	80 93 78 01 	sts	0x0178, r24
    13f0:	06 cd       	rjmp	.-1524   	; 0xdfe <main+0x252>
			}
		for(int i=0;i<=8;i+=2)
		{
			if(EEPROM_read(EEPROM_SATRTING_ADDRESS+i)==hours_counter)
    13f2:	ce 01       	movw	r24, r28
    13f4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
    13f8:	90 91 85 01 	lds	r25, 0x0185
    13fc:	89 17       	cp	r24, r25
    13fe:	79 f4       	brne	.+30     	; 0x141e <main+0x872>
				if(EEPROM_read(EEPROM_SATRTING_ADDRESS+1+i)==minutes_counter)
    1400:	ce 01       	movw	r24, r28
    1402:	01 96       	adiw	r24, 0x01	; 1
    1404:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
    1408:	90 91 86 01 	lds	r25, 0x0186
    140c:	89 17       	cp	r24, r25
    140e:	39 f4       	brne	.+14     	; 0x141e <main+0x872>
				{
					DIO_write('A',3,1);
    1410:	81 e4       	ldi	r24, 0x41	; 65
    1412:	63 e0       	ldi	r22, 0x03	; 3
    1414:	41 e0       	ldi	r20, 0x01	; 1
    1416:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
					Alarm_timeout=minutes_counter;
    141a:	90 90 86 01 	lds	r9, 0x0186
				LCD_vSend_string("press 1 to");
				LCD_movecursor(2,1);
				LCD_vSend_string("set clock");
				reset_flag='0';
			}
		for(int i=0;i<=8;i+=2)
    141e:	22 96       	adiw	r28, 0x02	; 2
    1420:	ca 30       	cpi	r28, 0x0A	; 10
    1422:	d1 05       	cpc	r29, r1
    1424:	31 f7       	brne	.-52     	; 0x13f2 <main+0x846>
				{
					DIO_write('A',3,1);
					Alarm_timeout=minutes_counter;
				}					
		}
		if(DIO_u8read('A',3))
    1426:	81 e4       	ldi	r24, 0x41	; 65
    1428:	63 e0       	ldi	r22, 0x03	; 3
    142a:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_u8read>
    142e:	88 23       	and	r24, r24
    1430:	49 f0       	breq	.+18     	; 0x1444 <main+0x898>
		{
			if(minutes_counter>Alarm_timeout)
    1432:	80 91 86 01 	lds	r24, 0x0186
    1436:	98 16       	cp	r9, r24
    1438:	28 f4       	brcc	.+10     	; 0x1444 <main+0x898>
				DIO_write('A',3,0);
    143a:	81 e4       	ldi	r24, 0x41	; 65
    143c:	63 e0       	ldi	r22, 0x03	; 3
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
		}

		
		CLR_BIT(PORTC,1);
    1444:	a9 98       	cbi	0x15, 1	; 21
		CLR_BIT(PORTC,2);
    1446:	aa 98       	cbi	0x15, 2	; 21
		CLR_BIT(PORTC,3);
    1448:	ab 98       	cbi	0x15, 3	; 21
		CLR_BIT(PORTC,4);
    144a:	ac 98       	cbi	0x15, 4	; 21
		CLR_BIT(PORTC,5);
    144c:	ad 98       	cbi	0x15, 5	; 21
		SET_BIT(PORTC,0);
    144e:	a8 9a       	sbi	0x15, 0	; 21
		seven_seg_write('B',seconds_counter%10);
    1450:	80 91 87 01 	lds	r24, 0x0187
    1454:	ca e0       	ldi	r28, 0x0A	; 10
    1456:	6c 2f       	mov	r22, r28
    1458:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__udivmodqi4>
    145c:	82 e4       	ldi	r24, 0x42	; 66
    145e:	69 2f       	mov	r22, r25
    1460:	0e 94 c4 0a 	call	0x1588	; 0x1588 <seven_seg_write>
    1464:	af e0       	ldi	r26, 0x0F	; 15
    1466:	b7 e2       	ldi	r27, 0x27	; 39
    1468:	11 97       	sbiw	r26, 0x01	; 1
    146a:	f1 f7       	brne	.-4      	; 0x1468 <main+0x8bc>
    146c:	00 c0       	rjmp	.+0      	; 0x146e <main+0x8c2>
    146e:	00 00       	nop
		_delay_ms(5);
		
		CLR_BIT(PORTC,0);
    1470:	a8 98       	cbi	0x15, 0	; 21
		CLR_BIT(PORTC,2);
    1472:	aa 98       	cbi	0x15, 2	; 21
		CLR_BIT(PORTC,3);
    1474:	ab 98       	cbi	0x15, 3	; 21
		CLR_BIT(PORTC,4);
    1476:	ac 98       	cbi	0x15, 4	; 21
		CLR_BIT(PORTC,5);
    1478:	ad 98       	cbi	0x15, 5	; 21
		SET_BIT(PORTC,1);
    147a:	a9 9a       	sbi	0x15, 1	; 21
		seven_seg_write('B',seconds_counter/10);
    147c:	80 91 87 01 	lds	r24, 0x0187
    1480:	6c 2f       	mov	r22, r28
    1482:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__udivmodqi4>
    1486:	68 2f       	mov	r22, r24
    1488:	82 e4       	ldi	r24, 0x42	; 66
    148a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <seven_seg_write>
    148e:	8f e0       	ldi	r24, 0x0F	; 15
    1490:	97 e2       	ldi	r25, 0x27	; 39
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	f1 f7       	brne	.-4      	; 0x1492 <main+0x8e6>
    1496:	00 c0       	rjmp	.+0      	; 0x1498 <main+0x8ec>
    1498:	00 00       	nop
		_delay_ms(5);
		
		CLR_BIT(PORTC,0);
    149a:	a8 98       	cbi	0x15, 0	; 21
		CLR_BIT(PORTC,1);
    149c:	a9 98       	cbi	0x15, 1	; 21
		CLR_BIT(PORTC,3);
    149e:	ab 98       	cbi	0x15, 3	; 21
		CLR_BIT(PORTC,4);
    14a0:	ac 98       	cbi	0x15, 4	; 21
		CLR_BIT(PORTC,5);
    14a2:	ad 98       	cbi	0x15, 5	; 21
		SET_BIT(PORTC,2);
    14a4:	aa 9a       	sbi	0x15, 2	; 21
		seven_seg_write('B',minutes_counter%10);
    14a6:	80 91 86 01 	lds	r24, 0x0186
    14aa:	6c 2f       	mov	r22, r28
    14ac:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__udivmodqi4>
    14b0:	82 e4       	ldi	r24, 0x42	; 66
    14b2:	69 2f       	mov	r22, r25
    14b4:	0e 94 c4 0a 	call	0x1588	; 0x1588 <seven_seg_write>
    14b8:	af e0       	ldi	r26, 0x0F	; 15
    14ba:	b7 e2       	ldi	r27, 0x27	; 39
    14bc:	11 97       	sbiw	r26, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <main+0x910>
    14c0:	00 c0       	rjmp	.+0      	; 0x14c2 <main+0x916>
    14c2:	00 00       	nop
		_delay_ms(5);
		
		CLR_BIT(PORTC,0);
    14c4:	a8 98       	cbi	0x15, 0	; 21
		CLR_BIT(PORTC,1);
    14c6:	a9 98       	cbi	0x15, 1	; 21
		CLR_BIT(PORTC,2);
    14c8:	aa 98       	cbi	0x15, 2	; 21
		CLR_BIT(PORTC,4);
    14ca:	ac 98       	cbi	0x15, 4	; 21
		CLR_BIT(PORTC,5);
    14cc:	ad 98       	cbi	0x15, 5	; 21
		SET_BIT(PORTC,3);
    14ce:	ab 9a       	sbi	0x15, 3	; 21
		seven_seg_write('B',minutes_counter/10);
    14d0:	80 91 86 01 	lds	r24, 0x0186
    14d4:	6c 2f       	mov	r22, r28
    14d6:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__udivmodqi4>
    14da:	68 2f       	mov	r22, r24
    14dc:	82 e4       	ldi	r24, 0x42	; 66
    14de:	0e 94 c4 0a 	call	0x1588	; 0x1588 <seven_seg_write>
    14e2:	8f e0       	ldi	r24, 0x0F	; 15
    14e4:	97 e2       	ldi	r25, 0x27	; 39
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	f1 f7       	brne	.-4      	; 0x14e6 <main+0x93a>
    14ea:	00 c0       	rjmp	.+0      	; 0x14ec <main+0x940>
    14ec:	00 00       	nop
		_delay_ms(5);
		
		CLR_BIT(PORTC,0);
    14ee:	a8 98       	cbi	0x15, 0	; 21
		CLR_BIT(PORTC,1);
    14f0:	a9 98       	cbi	0x15, 1	; 21
		CLR_BIT(PORTC,2);
    14f2:	aa 98       	cbi	0x15, 2	; 21
		CLR_BIT(PORTC,3);
    14f4:	ab 98       	cbi	0x15, 3	; 21
		CLR_BIT(PORTC,5);
    14f6:	ad 98       	cbi	0x15, 5	; 21
		SET_BIT(PORTC,4);
    14f8:	ac 9a       	sbi	0x15, 4	; 21
		seven_seg_write('B',hours_counter%10);
    14fa:	80 91 85 01 	lds	r24, 0x0185
    14fe:	6c 2f       	mov	r22, r28
    1500:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__udivmodqi4>
    1504:	82 e4       	ldi	r24, 0x42	; 66
    1506:	69 2f       	mov	r22, r25
    1508:	0e 94 c4 0a 	call	0x1588	; 0x1588 <seven_seg_write>
    150c:	af e0       	ldi	r26, 0x0F	; 15
    150e:	b7 e2       	ldi	r27, 0x27	; 39
    1510:	11 97       	sbiw	r26, 0x01	; 1
    1512:	f1 f7       	brne	.-4      	; 0x1510 <main+0x964>
    1514:	00 c0       	rjmp	.+0      	; 0x1516 <main+0x96a>
    1516:	00 00       	nop
		_delay_ms(5);
		
		CLR_BIT(PORTC,0);
    1518:	a8 98       	cbi	0x15, 0	; 21
		CLR_BIT(PORTC,1);
    151a:	a9 98       	cbi	0x15, 1	; 21
		CLR_BIT(PORTC,2);
    151c:	aa 98       	cbi	0x15, 2	; 21
		CLR_BIT(PORTC,3);
    151e:	ab 98       	cbi	0x15, 3	; 21
		CLR_BIT(PORTC,4);
    1520:	ac 98       	cbi	0x15, 4	; 21
		SET_BIT(PORTC,5);
    1522:	ad 9a       	sbi	0x15, 5	; 21
		seven_seg_write('B',hours_counter/10);
    1524:	80 91 85 01 	lds	r24, 0x0185
    1528:	6c 2f       	mov	r22, r28
    152a:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__udivmodqi4>
    152e:	68 2f       	mov	r22, r24
    1530:	82 e4       	ldi	r24, 0x42	; 66
    1532:	0e 94 c4 0a 	call	0x1588	; 0x1588 <seven_seg_write>
    1536:	8f e0       	ldi	r24, 0x0F	; 15
    1538:	97 e2       	ldi	r25, 0x27	; 39
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	f1 f7       	brne	.-4      	; 0x153a <main+0x98e>
    153e:	00 c0       	rjmp	.+0      	; 0x1540 <main+0x994>
    1540:	00 00       	nop
		_delay_ms(5);
		if (seconds_counter==60)
    1542:	80 91 87 01 	lds	r24, 0x0187
    1546:	8c 33       	cpi	r24, 0x3C	; 60
    1548:	39 f4       	brne	.+14     	; 0x1558 <main+0x9ac>
		{
			seconds_counter=0;
    154a:	10 92 87 01 	sts	0x0187, r1
			minutes_counter++;
    154e:	80 91 86 01 	lds	r24, 0x0186
    1552:	8f 5f       	subi	r24, 0xFF	; 255
    1554:	80 93 86 01 	sts	0x0186, r24
		}
		if (minutes_counter==60)
    1558:	80 91 86 01 	lds	r24, 0x0186
    155c:	8c 33       	cpi	r24, 0x3C	; 60
    155e:	39 f4       	brne	.+14     	; 0x156e <main+0x9c2>
		{
			minutes_counter=0;
    1560:	10 92 86 01 	sts	0x0186, r1
			hours_counter++;
    1564:	80 91 85 01 	lds	r24, 0x0185
    1568:	8f 5f       	subi	r24, 0xFF	; 255
    156a:	80 93 85 01 	sts	0x0185, r24
		}
		if (hours_counter==24)
    156e:	80 91 85 01 	lds	r24, 0x0185
    1572:	88 31       	cpi	r24, 0x18	; 24
    1574:	11 f4       	brne	.+4      	; 0x157a <main+0x9ce>
		{
			hours_counter=0;
    1576:	10 92 85 01 	sts	0x0185, r1
		}
		
		UART_vInterruptEnable();
    157a:	0e 94 88 0b 	call	0x1710	; 0x1710 <UART_vInterruptEnable>
    157e:	60 cb       	rjmp	.-2368   	; 0xc40 <main+0x94>

00001580 <seven_seg_vinit>:

#include "DIO.h"
#include <avr/io.h>
void seven_seg_vinit(unsigned char port_name)
{
	DIO_set_port_direction(port_name,0xFF);
    1580:	6f ef       	ldi	r22, 0xFF	; 255
    1582:	0e 94 e7 01 	call	0x3ce	; 0x3ce <DIO_set_port_direction>
}
    1586:	08 95       	ret

00001588 <seven_seg_write>:

void seven_seg_write(unsigned char portname,unsigned char number)
{
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	2a 97       	sbiw	r28, 0x0a	; 10
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
unsigned char arr[]={ 0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x47,0x7f,0x6f};
    159c:	de 01       	movw	r26, r28
    159e:	11 96       	adiw	r26, 0x01	; 1
    15a0:	e9 e7       	ldi	r30, 0x79	; 121
    15a2:	f1 e0       	ldi	r31, 0x01	; 1
    15a4:	8a e0       	ldi	r24, 0x0A	; 10
    15a6:	01 90       	ld	r0, Z+
    15a8:	0d 92       	st	X+, r0
    15aa:	81 50       	subi	r24, 0x01	; 1
    15ac:	e1 f7       	brne	.-8      	; 0x15a6 <seven_seg_write+0x1e>

//DIO_write_port(portname,arr[number]);
//1000 0000
PORTB&=0x80;
    15ae:	88 b3       	in	r24, 0x18	; 24
    15b0:	80 78       	andi	r24, 0x80	; 128
    15b2:	88 bb       	out	0x18, r24	; 24
PORTB|=~arr[number];
    15b4:	98 b3       	in	r25, 0x18	; 24
    15b6:	fe 01       	movw	r30, r28
    15b8:	e6 0f       	add	r30, r22
    15ba:	f1 1d       	adc	r31, r1
    15bc:	81 81       	ldd	r24, Z+1	; 0x01
    15be:	80 95       	com	r24
    15c0:	89 2b       	or	r24, r25
    15c2:	88 bb       	out	0x18, r24	; 24
    15c4:	2a 96       	adiw	r28, 0x0a	; 10
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	de bf       	out	0x3e, r29	; 62
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	cd bf       	out	0x3d, r28	; 61
    15d0:	df 91       	pop	r29
    15d2:	cf 91       	pop	r28
    15d4:	08 95       	ret

000015d6 <timer2_overflow_init_interrupt>:
#include <avr/io.h>
#include <avr/interrupt.h>
void timer2_overflow_init_interrupt(void)
{
	/* select timer clock */
	CLR_BIT(ASSR,AS2);
    15d6:	82 b5       	in	r24, 0x22	; 34
    15d8:	87 7f       	andi	r24, 0xF7	; 247
    15da:	82 bd       	out	0x22, r24	; 34
	/* select timer pre scalar */
	SET_BIT(TCCR2,CS21);
    15dc:	85 b5       	in	r24, 0x25	; 37
    15de:	82 60       	ori	r24, 0x02	; 2
    15e0:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS20);
    15e2:	85 b5       	in	r24, 0x25	; 37
    15e4:	81 60       	ori	r24, 0x01	; 1
    15e6:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS22);
    15e8:	85 b5       	in	r24, 0x25	; 37
    15ea:	84 60       	ori	r24, 0x04	; 4
    15ec:	85 bd       	out	0x25, r24	; 37
	/* enable interrupt*/
	sei();
    15ee:	78 94       	sei
	SET_BIT(TIMSK,TOIE2);
    15f0:	89 b7       	in	r24, 0x39	; 57
    15f2:	80 64       	ori	r24, 0x40	; 64
    15f4:	89 bf       	out	0x39, r24	; 57
}
    15f6:	08 95       	ret

000015f8 <timer_CTC_init_interrupt>:
void timer_CTC_init_interrupt(void)
{
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
    15f8:	83 b7       	in	r24, 0x33	; 51
    15fa:	88 60       	ori	r24, 0x08	; 8
    15fc:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=80;
    15fe:	80 e5       	ldi	r24, 0x50	; 80
    1600:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */	
	SET_BIT(TCCR0,CS00);
    1602:	83 b7       	in	r24, 0x33	; 51
    1604:	81 60       	ori	r24, 0x01	; 1
    1606:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    1608:	83 b7       	in	r24, 0x33	; 51
    160a:	84 60       	ori	r24, 0x04	; 4
    160c:	83 bf       	out	0x33, r24	; 51
	/* enable interrupt*/
	sei();
    160e:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
    1610:	89 b7       	in	r24, 0x39	; 57
    1612:	82 60       	ori	r24, 0x02	; 2
    1614:	89 bf       	out	0x39, r24	; 57
}
    1616:	08 95       	ret

00001618 <timer_wave_nonPWM>:


void timer_wave_nonPWM(void)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
    1618:	bb 9a       	sbi	0x17, 3	; 23
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
    161a:	83 b7       	in	r24, 0x33	; 51
    161c:	88 60       	ori	r24, 0x08	; 8
    161e:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=64;
    1620:	80 e4       	ldi	r24, 0x40	; 64
    1622:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
    1624:	83 b7       	in	r24, 0x33	; 51
    1626:	81 60       	ori	r24, 0x01	; 1
    1628:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    162a:	83 b7       	in	r24, 0x33	; 51
    162c:	84 60       	ori	r24, 0x04	; 4
    162e:	83 bf       	out	0x33, r24	; 51
	/* toggle OC0 on compare match*/
	SET_BIT(TCCR0,COM00);
    1630:	83 b7       	in	r24, 0x33	; 51
    1632:	80 61       	ori	r24, 0x10	; 16
    1634:	83 bf       	out	0x33, r24	; 51
}
    1636:	08 95       	ret

00001638 <timer_wave_fastPWM>:

void timer_wave_fastPWM(void)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
    1638:	bb 9a       	sbi	0x17, 3	; 23
	/* select fast PWM mode*/
	SET_BIT(TCCR0,WGM00);
    163a:	83 b7       	in	r24, 0x33	; 51
    163c:	80 64       	ori	r24, 0x40	; 64
    163e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);
    1640:	83 b7       	in	r24, 0x33	; 51
    1642:	88 60       	ori	r24, 0x08	; 8
    1644:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=64;
    1646:	80 e4       	ldi	r24, 0x40	; 64
    1648:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
    164a:	83 b7       	in	r24, 0x33	; 51
    164c:	81 60       	ori	r24, 0x01	; 1
    164e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    1650:	83 b7       	in	r24, 0x33	; 51
    1652:	84 60       	ori	r24, 0x04	; 4
    1654:	83 bf       	out	0x33, r24	; 51
	/* Set OC0 on compare match, clear OC0 at BOTTOM,(inverting mode)*/
	SET_BIT(TCCR0,COM00);
    1656:	83 b7       	in	r24, 0x33	; 51
    1658:	80 61       	ori	r24, 0x10	; 16
    165a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
    165c:	83 b7       	in	r24, 0x33	; 51
    165e:	80 62       	ori	r24, 0x20	; 32
    1660:	83 bf       	out	0x33, r24	; 51
}
    1662:	08 95       	ret

00001664 <timer_wave_phasecorrectPWM>:


void timer_wave_phasecorrectPWM(void)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
    1664:	bb 9a       	sbi	0x17, 3	; 23
	/* select phase correct PWM mode*/
	SET_BIT(TCCR0,WGM00);
    1666:	83 b7       	in	r24, 0x33	; 51
    1668:	80 64       	ori	r24, 0x40	; 64
    166a:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=64;
    166c:	80 e4       	ldi	r24, 0x40	; 64
    166e:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
    1670:	83 b7       	in	r24, 0x33	; 51
    1672:	81 60       	ori	r24, 0x01	; 1
    1674:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    1676:	83 b7       	in	r24, 0x33	; 51
    1678:	84 60       	ori	r24, 0x04	; 4
    167a:	83 bf       	out	0x33, r24	; 51
	/* Set OC0 on compare match when up-counting. Clear OC0 on compare match when down counting.*/
	SET_BIT(TCCR0,COM00);
    167c:	83 b7       	in	r24, 0x33	; 51
    167e:	80 61       	ori	r24, 0x10	; 16
    1680:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
    1682:	83 b7       	in	r24, 0x33	; 51
    1684:	80 62       	ori	r24, 0x20	; 32
    1686:	83 bf       	out	0x33, r24	; 51
}
    1688:	08 95       	ret

0000168a <UART_vInit>:
#include <util/delay.h>
#include <avr/io.h>
#include "std_macros.h"

void UART_vInit(unsigned long baud)
{
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
	/*1 - Choose baud rate that will be used by sender and receiver by writing to UBRRL/UBRRH*/
	unsigned short UBRR ;
	UBRR=(F_CPU/(16*baud))-1 ;
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	aa 1f       	adc	r26, r26
    1694:	bb 1f       	adc	r27, r27
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	aa 1f       	adc	r26, r26
    169c:	bb 1f       	adc	r27, r27
    169e:	9c 01       	movw	r18, r24
    16a0:	ad 01       	movw	r20, r26
    16a2:	22 0f       	add	r18, r18
    16a4:	33 1f       	adc	r19, r19
    16a6:	44 1f       	adc	r20, r20
    16a8:	55 1f       	adc	r21, r21
    16aa:	22 0f       	add	r18, r18
    16ac:	33 1f       	adc	r19, r19
    16ae:	44 1f       	adc	r20, r20
    16b0:	55 1f       	adc	r21, r21
    16b2:	60 e0       	ldi	r22, 0x00	; 0
    16b4:	72 e1       	ldi	r23, 0x12	; 18
    16b6:	8a e7       	ldi	r24, 0x7A	; 122
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	0e 94 98 0b 	call	0x1730	; 0x1730 <__udivmodsi4>
    16be:	21 50       	subi	r18, 0x01	; 1
    16c0:	30 40       	sbci	r19, 0x00	; 0
	UBRRH=(unsigned char)(UBRR>>8);
    16c2:	30 bd       	out	0x20, r19	; 32
	UBRRL=(unsigned char)UBRR;
    16c4:	29 b9       	out	0x09, r18	; 9
	/*2 - Enable USART Sender & Receiver*/
	SET_BIT(UCSRB,TXEN);
    16c6:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UCSRB,RXEN);
    16c8:	54 9a       	sbi	0x0a, 4	; 10
	/*3 - Choose number of data bits to be sent,parity and stop bits from UCSRC
	, We will work with 8 bits data,1 stop bit and no parity bits*/
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
    16ca:	86 e8       	ldi	r24, 0x86	; 134
    16cc:	80 bd       	out	0x20, r24	; 32
}
    16ce:	08 95       	ret

000016d0 <UART_vSendData>:

void UART_vSendData(char data)
{
	/*Wait for UDR transmit buffer to be empty*/
	while(READ_BIT(UCSRA,UDRE)==0);
    16d0:	5d 9b       	sbis	0x0b, 5	; 11
    16d2:	fe cf       	rjmp	.-4      	; 0x16d0 <UART_vSendData>
	/*Put data to UDR transmit buffer transmit*/
	UDR=data ;
    16d4:	8c b9       	out	0x0c, r24	; 12
}
    16d6:	08 95       	ret

000016d8 <UART_u8ReceiveData>:

char UART_u8ReceiveData(void)
{
	/*Wait for UDR receive buffer to be filled with data*/
	while(READ_BIT(UCSRA,RXC)==0);
    16d8:	5f 9b       	sbis	0x0b, 7	; 11
    16da:	fe cf       	rjmp	.-4      	; 0x16d8 <UART_u8ReceiveData>
	/*Receive data from UDR receive buffer*/
	return UDR ;
    16dc:	8c b1       	in	r24, 0x0c	; 12
}
    16de:	08 95       	ret

000016e0 <UART_vSendstring>:

void UART_vSendstring( char *ptr)
{
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	ec 01       	movw	r28, r24
	while(*ptr!=0)
    16e6:	88 81       	ld	r24, Y
    16e8:	88 23       	and	r24, r24
    16ea:	79 f0       	breq	.+30     	; 0x170a <UART_vSendstring+0x2a>
	while(READ_BIT(UCSRA,RXC)==0);
	/*Receive data from UDR receive buffer*/
	return UDR ;
}

void UART_vSendstring( char *ptr)
    16ec:	21 96       	adiw	r28, 0x01	; 1
{
	while(*ptr!=0)
	{
		UART_vSendData(*ptr);
    16ee:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <UART_vSendData>
    16f2:	8f ef       	ldi	r24, 0xFF	; 255
    16f4:	90 e7       	ldi	r25, 0x70	; 112
    16f6:	a2 e0       	ldi	r26, 0x02	; 2
    16f8:	81 50       	subi	r24, 0x01	; 1
    16fa:	90 40       	sbci	r25, 0x00	; 0
    16fc:	a0 40       	sbci	r26, 0x00	; 0
    16fe:	e1 f7       	brne	.-8      	; 0x16f8 <UART_vSendstring+0x18>
    1700:	00 c0       	rjmp	.+0      	; 0x1702 <UART_vSendstring+0x22>
    1702:	00 00       	nop
	return UDR ;
}

void UART_vSendstring( char *ptr)
{
	while(*ptr!=0)
    1704:	89 91       	ld	r24, Y+
    1706:	88 23       	and	r24, r24
    1708:	91 f7       	brne	.-28     	; 0x16ee <UART_vSendstring+0xe>
	{
		UART_vSendData(*ptr);
		ptr++;
		_delay_ms(100);
	}	
}
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	08 95       	ret

00001710 <UART_vInterruptEnable>:
void UART_vInterruptEnable()
{
	SET_BIT(UCSRB,7);
    1710:	57 9a       	sbi	0x0a, 7	; 10
}
    1712:	08 95       	ret

00001714 <UART_vInterruptDisable>:
void UART_vInterruptDisable()
{
	CLR_BIT(UCSRB,7);
    1714:	57 98       	cbi	0x0a, 7	; 10
}
    1716:	08 95       	ret

00001718 <__udivmodqi4>:
    1718:	99 1b       	sub	r25, r25
    171a:	79 e0       	ldi	r23, 0x09	; 9
    171c:	04 c0       	rjmp	.+8      	; 0x1726 <__udivmodqi4_ep>

0000171e <__udivmodqi4_loop>:
    171e:	99 1f       	adc	r25, r25
    1720:	96 17       	cp	r25, r22
    1722:	08 f0       	brcs	.+2      	; 0x1726 <__udivmodqi4_ep>
    1724:	96 1b       	sub	r25, r22

00001726 <__udivmodqi4_ep>:
    1726:	88 1f       	adc	r24, r24
    1728:	7a 95       	dec	r23
    172a:	c9 f7       	brne	.-14     	; 0x171e <__udivmodqi4_loop>
    172c:	80 95       	com	r24
    172e:	08 95       	ret

00001730 <__udivmodsi4>:
    1730:	a1 e2       	ldi	r26, 0x21	; 33
    1732:	1a 2e       	mov	r1, r26
    1734:	aa 1b       	sub	r26, r26
    1736:	bb 1b       	sub	r27, r27
    1738:	fd 01       	movw	r30, r26
    173a:	0d c0       	rjmp	.+26     	; 0x1756 <__udivmodsi4_ep>

0000173c <__udivmodsi4_loop>:
    173c:	aa 1f       	adc	r26, r26
    173e:	bb 1f       	adc	r27, r27
    1740:	ee 1f       	adc	r30, r30
    1742:	ff 1f       	adc	r31, r31
    1744:	a2 17       	cp	r26, r18
    1746:	b3 07       	cpc	r27, r19
    1748:	e4 07       	cpc	r30, r20
    174a:	f5 07       	cpc	r31, r21
    174c:	20 f0       	brcs	.+8      	; 0x1756 <__udivmodsi4_ep>
    174e:	a2 1b       	sub	r26, r18
    1750:	b3 0b       	sbc	r27, r19
    1752:	e4 0b       	sbc	r30, r20
    1754:	f5 0b       	sbc	r31, r21

00001756 <__udivmodsi4_ep>:
    1756:	66 1f       	adc	r22, r22
    1758:	77 1f       	adc	r23, r23
    175a:	88 1f       	adc	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	1a 94       	dec	r1
    1760:	69 f7       	brne	.-38     	; 0x173c <__udivmodsi4_loop>
    1762:	60 95       	com	r22
    1764:	70 95       	com	r23
    1766:	80 95       	com	r24
    1768:	90 95       	com	r25
    176a:	9b 01       	movw	r18, r22
    176c:	ac 01       	movw	r20, r24
    176e:	bd 01       	movw	r22, r26
    1770:	cf 01       	movw	r24, r30
    1772:	08 95       	ret

00001774 <_exit>:
    1774:	f8 94       	cli

00001776 <__stop_program>:
    1776:	ff cf       	rjmp	.-2      	; 0x1776 <__stop_program>
